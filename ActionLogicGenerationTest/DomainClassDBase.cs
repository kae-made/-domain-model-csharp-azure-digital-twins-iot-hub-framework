// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ActionLogicGenerationTest
{
    public partial class DomainClassDBase : DomainClassD
    {
        protected static readonly string className = "D";

        public string DomainName { get { return CIMActionLogicGenerationTestLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"D_ID={attr_D_ID}"; }

        public static DomainClassDBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassDBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:D(D_ID={newInstance.Attr_D_ID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassDBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_D_ID = Guid.NewGuid().ToString();
            stateof_D_ID = true;
        }
        protected string attr_D_ID;
        protected bool stateof_D_ID = false;

        protected string attr_A_ID;
        protected bool stateof_A_ID = false;

        protected DomainTypeComplexData attr_ComplexValue = new DomainTypeComplexData() ;
        protected bool stateof_ComplexValue = false;

        protected double attr_RealValue;
        protected bool stateof_RealValue = false;

        public string Attr_D_ID { get { return attr_D_ID; } set { attr_D_ID = value; stateof_D_ID = true; } }
        public string Attr_A_ID { get { return attr_A_ID; } }
        public DomainTypeComplexData Attr_ComplexValue { get { return attr_ComplexValue; } set { attr_ComplexValue = value; stateof_ComplexValue = true; } }
        public double Attr_RealValue { get { return attr_RealValue; } set { attr_RealValue = value; stateof_RealValue = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassD instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "D_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_D_ID)
                        {
                            result = false;
                        }
                        break;
                    case "A_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_A_ID)
                        {
                            result = false;
                        }
                        break;
                    case "ComplexValue":
                        if ((DomainTypeComplexData)conditionPropertyValues[propertyName] != instance.Attr_ComplexValue)
                        {
                            result = false;
                        }
                        break;
                    case "RealValue":
                        if ((double)conditionPropertyValues[propertyName] != instance.Attr_RealValue)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR4A;
        public DomainClassA LinkedR4()
        {
            if (relR4A == null)
            {
                var candidates = instanceRepository.GetDomainInstances("A").Where(inst=>(this.Attr_A_ID==((DomainClassA)inst).Attr_A_ID));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "A", "R4", candidates, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR4A = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R4", Phrase = "" };

            }
            return relR4A.GetDestination<DomainClassA>();
        }

        public bool LinkR4(DomainClassA instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4A == null)
            {
                this.attr_A_ID = instance.Attr_A_ID;
                this.stateof_A_ID = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:D(D_ID={this.Attr_D_ID}):link[A(A_ID={instance.Attr_A_ID})]");

                result = (LinkedR4()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR4A });
                }
            }
            return result;
        }

        public bool UnlinkR4(DomainClassA instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4A != null && ( this.Attr_A_ID==instance.Attr_A_ID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR4A });
        
                this.attr_A_ID = null;
                this.stateof_A_ID = true;
                relR4A = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:D(D_ID={this.Attr_D_ID}):unlink[A(A_ID={instance.Attr_A_ID})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassR> LinkedR5Other()
        {
            var result = new List<DomainClassR>();
            var candidates = instanceRepository.GetDomainInstances("R").Where(inst=>(this.Attr_D_ID==((DomainClassR)inst).Attr_D_ID));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "R", "R5_", candidates, () => { return DomainClassRBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassR)c).LinkedR5One();
                result.Add((DomainClassR)c);
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:D(D_ID={this.Attr_D_ID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("D_ID"))
            {
// should adopt timer setting
                attr_D_ID = (string)propertyValues["D_ID"];
            }
            stateof_D_ID = false;
            if (propertyValues.ContainsKey("A_ID"))
            {
// should adopt timer setting
                attr_A_ID = (string)propertyValues["A_ID"];
            }
            stateof_A_ID = false;
            if (propertyValues.ContainsKey("ComplexValue"))
            {
// should adopt timer setting
                attr_ComplexValue.Restore((IDictionary<string, object>)propertyValues["ComplexValue"]);
            }
            stateof_ComplexValue = false;
            if (propertyValues.ContainsKey("RealValue"))
            {
// should adopt timer setting
                attr_RealValue = (double)propertyValues["RealValue"];
            }
            stateof_RealValue = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_D_ID)
            {
                results.Add("D_ID", attr_D_ID);
                stateof_D_ID = false;
            }
            if (stateof_A_ID)
            {
                results.Add("A_ID", attr_A_ID);
                stateof_A_ID = false;
            }
            if (stateof_ComplexValue)
            {
                results.Add("ComplexValue", attr_ComplexValue);
                stateof_ComplexValue = false;
            }
            if (stateof_RealValue)
            {
                results.Add("RealValue", attr_RealValue);
                stateof_RealValue = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"D_ID={this.Attr_D_ID}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("D_ID", attr_D_ID);
            if (!onlyIdentity) results.Add("A_ID", attr_A_ID);
            if (!onlyIdentity) results.Add("ComplexValue", attr_ComplexValue);
            if (!onlyIdentity) results.Add("RealValue", attr_RealValue);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
