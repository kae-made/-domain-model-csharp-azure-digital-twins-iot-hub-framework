// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ActionLogicGenerationTest
{
    partial class DomainClassCStateMachine
    {
        protected void ActionCreated(string b_id, string s_id)
        {
            // Action Description on Model as a reference.

            //   1 : SELECT ANY b FROM INSTANCES OF B WHERE SELECTED.B_ID == rcvd_evt.b_id;
            //   2 : SELECT ANY linkedC RELATED BY b->C[R2];
            //   3 : IF NOT_EMPTY linkedC
            //   4 : 	WHILE TRUE
            //   5 : 		SELECT ONE nextLinkedC RELATED BY linkedC->C[R3.'predecessor'];
            //   6 : 		IF EMPTY nextLinkedC
            //   7 : 			BREAK;
            //   8 : 		END IF;
            //   9 : 		linkedC = nextLinkedC;
            //  10 : 		IF NOT_EMPTY linkedC
            //  11 : 			CONTINUE;
            //  12 : 		END IF;
            //  13 : 	END WHILE;
            //  14 : 	RELATE SELF TO linkedC ACROSS R3.'successor';
            //  15 : END IF; 
            //  16 : RELATE SELF TO b ACROSS R2;
            //  17 : SELECT ANY cx FROM INSTANCES OF CX WHERE SELECTED.S_ID == rcvd_evt.s_id;
            //  18 : IF NOT_EMPTY cx
            //  19 : 	RELATE cx TO SELF ACROSS R7;
            //  20 : 	SELECT ONE s RELATED BY cx->S[R6];
            //  21 : 	SELECT MANY R RELATED BY cx->S[R6]->R[R5];
            //  22 : 	SELECT MANY D1 RELATED BY cx->S[R6]->R[R5]->D[R5];
            //  23 : 	SELECT MANY D2 RELATED BY cx->S[R6]->D[R5];
            //  24 : 	SELECT MANY aSet RELATED BY cx->S[R6]->D[R5]->A[R4];
            //  25 : 	SELECT MANY bSet RELATED BY cx->S[R6]->R[R5]->D[R5]->A[R4]->B[R1];
            //  26 : 	total = 0;
            //  27 : 	FOR EACH a IN aSet
            //  28 : 		total = total + a.Number;
            //  29 : 	END FOR;
            //  30 : 	FOR EACH b IN bSet
            //  31 : 		SELECT ONE aByB RELATED BY b->A[R1];
            //  32 : 		IF b.Kind == KindOfB::Kind1
            //  33 : 			aByB.Name = aByB.Name + "1";
            //  34 : 		ELIF b.Kind == KindOfB::Kind2
            //  35 : 			aByB.Number = 2 * aByB.Number;
            //  36 : 		ELIF b.Kind == KindOfB::Kind3
            //  37 : 			aByB.Number = aByB.Number / 3;
            //  38 : 		ELSE
            //  39 : 			aByB.Number = aByB.Number % 4;
            //  40 : 		END IF;
            //  41 : 	END FOR;
            //  42 : END IF;
            //  43 : create event instance doneEvent OF C2:'Done' TO SELF;
            //  44 : timer = TIM::timer_start( event_inst:doneEvent, microseconds: 30000000);

            // External Entities Reference Declarations.
            var _eeTIMRef_ = (Kae.DomainModel.Csharp.Framework.ExternalEntities.TIM.TIMWrapper)instanceRepository.GetExternalEntity("TIM");

            // Line : 1
            var bTempSet = instanceRepository.GetDomainInstances("B").Where(selected => ((((DomainClassB)selected).Attr_B_ID == b_id)));
            if (instanceRepository.ExternalStorageAdaptor != null) bTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "B", bTempSet, () => { return $"(B_ID = b_id)"; }, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var b = (DomainClassB)(bTempSet.FirstOrDefault());

            // Line : 2
            var linkedC = b.LinkedR2().FirstOrDefault();

            // Line : 3
            if (linkedC != null)
            {
                // Line : 4
                while (true)
                {
                    // Line : 5
                    var nextLinkedC = linkedC.LinkedR3Predecessor();

                    // Line : 6
                    if (nextLinkedC == null)
                    {
                        // Line : 7
                        break;
                    }

                    // Line : 9
                    linkedC = nextLinkedC;
                    // Line : 10
                    if (linkedC != null)
                    {
                        // Line : 11
                        continue;
                    }

                }

                // Line : 14
                // SELF - R3 -> linkedC;
                target.LinkR3Successor(linkedC, changedStates);

            }

            // Line : 16
            // SELF - R2 -> b;
            target.LinkR2(b, changedStates);

            // Line : 17
            var cxTempSet = instanceRepository.GetDomainInstances("CX").Where(selected => ((((DomainClassCX)selected).Attr_S_ID == s_id)));
            if (instanceRepository.ExternalStorageAdaptor != null) cxTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "CX", cxTempSet, () => { return $"(S_ID = s_id)"; }, () => { return DomainClassCXBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var cx = (DomainClassCX)(cxTempSet.FirstOrDefault());

            // Line : 18
            if (cx != null)
            {
                // Line : 19
                // cx - R7 -> SELF;
                cx.LinkR7IsTargetOf(target, changedStates);

                // Line : 20
                var s = cx.GetSuperClassR6();

                // Line : 21
                List<DomainClassR> R = new List<DomainClassR>();
                var RIn0RL3Set = cx.GetSuperClassR6().LinkedR5One();
                foreach (var RIn0RL3 in RIn0RL3Set)
                {
                    R.Add(RIn0RL3);
                }

                // Line : 22
                List<DomainClassD> D1 = new List<DomainClassD>();
                var cxIn0RL4Set = cx.GetSuperClassR6().LinkedR5One();
                foreach (var cxIn0RL4 in cxIn0RL4Set)
                {
                    D1.Add(cxIn0RL4.LinkedR5One());
                }

                // Line : 23
                List<DomainClassD> D2 = new List<DomainClassD>();
                var cxIn0RL5Set = cx.GetSuperClassR6().LinkedR5One();
                foreach (var cxIn0RL5 in cxIn0RL5Set)
                {
                    D2.Add(cxIn0RL5.LinkedR5One());
                }

                // Line : 24
                List<DomainClassA> aSet = new List<DomainClassA>();
                var cxIn0RL6Set = cx.GetSuperClassR6().LinkedR5One();
                foreach (var cxIn0RL6 in cxIn0RL6Set)
                {
                    var aSetIn1RL6 = cxIn0RL6.LinkedR5One().LinkedR4();
                    if (aSetIn1RL6 != null)
                    {
                        aSet.Add(aSetIn1RL6);
                    }
                }

                // Line : 25
                List<DomainClassB> bSet = new List<DomainClassB>();
                var cxIn0RL7Set = cx.GetSuperClassR6().LinkedR5One();
                foreach (var cxIn0RL7 in cxIn0RL7Set)
                {
                    var cxIn1RL7 = cxIn0RL7.LinkedR5One().LinkedR4();
                    if (cxIn1RL7 != null)
                    {
                        var bSetIn2RL7Set = cxIn1RL7.LinkedR1();
                        foreach (var bSetIn2RL7 in bSetIn2RL7Set)
                        {
                            bSet.Add(bSetIn2RL7);
                        }
                    }
                }

                // Line : 26
                var total = 0;
                // Line : 27
                foreach (var a in aSet)
                {
                    // Line : 28
                    total = (total + a.Attr_Number);
                }

                // Line : 30
                foreach (var b_ in bSet)
                {
                    b = b_;
                    // Line : 31
                    var aByB = b.LinkedR1();

                    // Line : 32
                    if ((b.Attr_Kind == DomainTypeKindOfB.Kind1))
                    {
                        // Line : 33
                        aByB.Attr_Name = (aByB.Attr_Name + "1");
                    }
                    else if ((b.Attr_Kind == DomainTypeKindOfB.Kind2))
                    {
                        // Line : 35
                        aByB.Attr_Number = (2 * aByB.Attr_Number);
                    }
                    else if ((b.Attr_Kind == DomainTypeKindOfB.Kind3))
                    {
                        // Line : 37
                        aByB.Attr_Number = (aByB.Attr_Number / 3);
                    }
                    else
                    {
                        // Line : 39
                        aByB.Attr_Number = (aByB.Attr_Number % 4);
                    }

                }

            }

            // Line : 43
            var doneEvent = DomainClassCStateMachine.C_2_Done.Create(receiver:target, isSelfEvent:false, sendNow:false);
            if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
            {
                changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = target, Event = doneEvent });
            }

            // Line : 44
            var timer = _eeTIMRef_.timer_start(event_inst:doneEvent, microseconds:30000000);

        }

        protected void ActionWorked()
        {
            // Action Description on Model as a reference.

            //   1 : SELECT ONE b RELATED BY SELF->B[R2];
            //   2 : UNRELATE b FROM SELF ACROSS R2;
            //   3 : SELECT ONE prevC RELATED BY SELF->C[R3.'successor'];
            //   4 : SELECT ONE nextC RELATED BY SELF->C[R3.'predecessor'];
            //   5 : IF NOT_EMPTY prevC
            //   6 : 	UNRELATE SELF FROM prevC ACROSS R3.'successor';
            //   7 : END IF;
            //   8 : IF NOT_EMPTY nextC
            //   9 : 	UNRELATE nextC FROM SELF ACROSS R3.'successor';
            //  10 : END IF;
            //  11 : IF NOT_EMPTY prevC AND NOT_EMPTY nextC
            //  12 : 	RELATE prevC TO nextC ACROSS R3.'predecessor';
            //  13 : END IF;

            // Line : 1
            var b = target.LinkedR2();

            // Line : 2
            // Unrelate b From SELF Across R2
            target.UnlinkR2(b, changedStates);

            // Line : 3
            var prevC = target.LinkedR3Successor();

            // Line : 4
            var nextC = target.LinkedR3Predecessor();

            // Line : 5
            if (prevC != null)
            {
                // Line : 6
                // Unrelate SELF From prevC Across R3
                target.UnlinkR3Successor(prevC, changedStates);

            }

            // Line : 8
            if (nextC != null)
            {
                // Line : 9
                // Unrelate nextC From SELF Across R3
                nextC.UnlinkR3Successor(target, changedStates);

            }

            // Line : 11
            if ((prevC != null && nextC != null))
            {
                // Line : 12
                // prevC - R3 -> nextC;
                nextC.LinkR3Successor(prevC, changedStates);

            }


        }

    }
}
