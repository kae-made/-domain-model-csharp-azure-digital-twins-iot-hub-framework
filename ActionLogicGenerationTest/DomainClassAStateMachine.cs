// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ActionLogicGenerationTest
{
    public partial class DomainClassAStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            A_1 = 0    // Update
        }

        public enum States
        {
            _NoState_ = 0,
            Updated = 1
        }

        private interface IEventArgsNameNumberDef
        {
            public string name { get; set; }
            public int number { get; set; }
        }
        public class A_1_Update : EventData, IEventArgsNameNumberDef
        {
            DomainClassA reciever;

            public A_1_Update(DomainClassA reciever) : base("A_1_Update", (int)Events.A_1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public string name { get; set; }
            public int number { get; set; }
            public static A_1_Update Create(DomainClassA receiver, string name, int number, bool isSelfEvent, bool sendNow)
            {
                var newEvent = new A_1_Update(receiver) { name = name, number = number };
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent, isSelfEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }

            public override string GetReceiverIdentities()
            {
                string identiteis = "";
                if (this.reciever != null)
                {
                    identiteis = this.reciever.GetIdForExternalStorage();
                }
                return identiteis;
            }

            public override IDictionary<string, object> GetSupplementalData()
            {
                var supplementalData = new Dictionary<string, object>();

                supplementalData.Add("name", name);
                supplementalData.Add("number", number);

                return supplementalData;
            }
        }

        protected DomainClassA target;

        protected InstanceRepository instanceRepository;

        protected string DomainName { get { return target.DomainName; } }

        // Constructor
        public DomainClassAStateMachine(DomainClassA target, bool synchronousMode, InstanceRepository instanceRepository, Logger logger) : base(1, synchronousMode, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[1, 1]
            {
                { (int)States.Updated }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:A(A_ID={target.Attr_A_ID}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.Updated:
                ActionUpdated(((IEventArgsNameNumberDef)eventData).name, ((IEventArgsNameNumberDef)eventData).number);
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:A(A_ID={target.Attr_A_ID}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
