// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Reflection;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ActionLogicGenerationTest
{
    public partial class CIMActionLogicGenerationTestLib
    {
        public void CreateTest(int numOfB, int x, int y)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : CREATE OBJECT INSTANCE a OF A;
            //   2 : numOfCreatedB = 0;
            //   3 : WHILE numOfCreatedB < param.numOfB
            //   4 : 	CREATE OBJECT INSTANCE b OF B;
            //   5 : 	IF ( numOfCreatedB % 2 ) == 0
            //   6 : 		b.Kind = KindOfB::Kind1;
            //   7 : 		RELATE a TO b ACROSS R1;
            //   8 : 	ELSE
            //   9 : 		b.Kind = KindOfB::Kind2;
            //  10 : 		RELATE b TO a ACROSS R1;
            //  11 : 	END IF; 
            //  12 : 	numOfCreatedB = numOfCreatedB + 1;
            //  13 : END WHILE;
            //  14 : 
            //  15 : CREATE OBJECT INSTANCE d OF D;
            //  16 : d.ComplexValue.X = param.x;
            //  17 : d.ComplexValue.Y = param.y;
            //  18 : 
            //  19 : CREATE OBJECT INSTANCE sx OF S;
            //  20 : CREATE OBJECT INSTANCE cx OF CX;
            //  21 : RELATE sx TO cx ACROSS R6;
            //  22 : 
            //  23 : CREATE OBJECT INSTANCE sy OF S;
            //  24 : CREATE OBJECT INSTANCE cy OF CY;
            //  25 : RELATE cy TO sy ACROSS R6;
            //  26 : 
            //  27 : cy.Price = d.ComplexValue.X;
            //  28 : 
            //  29 : CREATE OBJECT INSTANCE od OF D;
            //  30 : od.ComplexValue.X = 4;
            //  31 : od.RealValue = 3.6;
            //  32 : 
            //  33 : CREATE OBJECT INSTANCE r1 OF R;
            //  34 : CREATE OBJECT INSTANCE r2 OF R;
            //  35 : 
            //  36 : RELATE d TO sx ACROSS R5 USING r1;
            //  37 : RELATE sy TO od ACROSS R5 USING r2;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var a = DomainClassABase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 2
            var numOfCreatedB = 0;
            // Line : 3
            while ((numOfCreatedB < numOfB))
            {
                // Line : 4
                var b = DomainClassBBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 5
                if (((numOfCreatedB % 2) == 0))
                {
                    // Line : 6
                    b.Attr_Kind = DomainTypeKindOfB.Kind1;
                    // Line : 7
                    // a - R1 -> b;
                    b.LinkR1(a, changedStates);

                }
                else
                {
                    // Line : 9
                    b.Attr_Kind = DomainTypeKindOfB.Kind2;
                    // Line : 10
                    // b - R1 -> a;
                    b.LinkR1(a, changedStates);

                }

                // Line : 12
                numOfCreatedB = (numOfCreatedB + 1);
            }

            // Line : 15
            var d = DomainClassDBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 16
            d.Attr_ComplexValue.X = x;
            // Line : 17
            d.Attr_ComplexValue.Y = y;
            // Line : 19
            var sx = DomainClassSBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 20
            var cx = DomainClassCXBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 21
            // sx - R6 -> cx;
            cx.LinkR6(sx, changedStates);

            // Line : 23
            var sy = DomainClassSBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 24
            var cy = DomainClassCYBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 25
            // cy - R6 -> sy;
            cy.LinkR6(sy, changedStates);

            // Line : 27
            cy.Attr_Price = d.Attr_ComplexValue.X;
            // Line : 29
            var od = DomainClassDBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 30
            od.Attr_ComplexValue.X = 4;
            // Line : 31
            od.Attr_RealValue = 3.6;
            // Line : 33
            var r1 = DomainClassRBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 34
            var r2 = DomainClassRBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 36
            // Relate d - R5 -> sx USING r1
            r1.LinkR5(d,sx);

            // Line : 37
            // Relate sy - R5 -> od USING r2
            r2.LinkR5(od,sy);


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void DeleteTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT MANY aSet FROM INSTANCES OF A;
            //   2 : FOR EACH a IN aSet
            //   3 : 	SELECT MANY bSet RELATED BY a->B[R1];
            //   4 : 	FOR EACH b in bSet
            //   5 : 		SELECT MANY cSet RELATED BY b->C[R2];
            //   6 : 		FOR EACH c in cSet
            //   7 : 			UNRELATE b FROM c ACROSS R2;
            //   8 : 			SELECT ONE prevC RELATED BY c->C[R3.'successor'];
            //   9 : 			SELECT ONE nextC RELATED BY c->C[R3.'predecessor'];
            //  10 : 			IF NOT_EMPTY prevC
            //  11 : 				UNRELATE prevC FROM c ACROSS R3.'predecessor';
            //  12 : 			END IF;
            //  13 : 			IF NOT_EMPTY nextC
            //  14 : 				UNRELATE c FROM nextC ACROSS R3.'predecessor';
            //  15 : 			END IF;
            //  16 : 			SELECT ONE cx RELATED BY c->CX[R7];
            //  17 : 			IF NOT_EMPTY cx
            //  18 : 				IF c.Number > 0
            //  19 : 					UNRELATE cx FROM c ACROSS R7;
            //  20 : 				ELSE
            //  21 : 					UNRELATE c FROM cx ACROSS R7;
            //  22 : 				END IF;
            //  23 : 				// name 's' can't be used at this level because 's' is using in following and upper level block!
            //  24 : 				SELECT ONE s1 RELATED BY cx->S[R6];
            //  25 : 				SELECT MANY rSet RELATED BY s1->R[R5];
            //  26 : 				FOR EACH r in rSet
            //  27 : 					SELECT ONE d RELATED BY r->D[R5];
            //  28 : 					IF ( c.Number % 2 ) == 0
            //  29 : 						UNRELATE d FROM s1 ACROSS R5 using r;
            //  30 : 					ELSE
            //  31 : 						UNRELATE s1 FROM d ACROSS R5 using r;
            //  32 : 					END IF;
            //  33 : 					DELETE OBJECT INSTANCE r;
            //  34 : 				END FOR;
            //  35 : 				UNRELATE cx FROM s1 ACROSS R6;
            //  36 : 				DELETE OBJECT INSTANCE s1;
            //  37 : 				DELETE OBJECT INSTANCE cx;
            //  38 : 			END IF;
            //  39 : 		END FOR;
            //  40 : 	END FOR;
            //  41 : END FOR;
            //  42 : 
            //  43 : SELECT ANY s FROM INSTANCES OF S;
            //  44 : IF NOT_EMPTY s
            //  45 : 	SELECT ONE cy RELATED BY s->CY[R6];
            //  46 : 	IF NOT_EMPTY cy
            //  47 : 		SELECT MANY rSet RELATED BY s->R[R5];
            //  48 : 		FOR EACH r IN rSet
            //  49 : 			SELECT ONE d RELATED BY r->D[R5];
            //  50 : 			UNRELATE s FROM d ACROSS R5 USING r;
            //  51 : 			DELETE OBJECT INSTANCE r;
            //  52 : 		END FOR;
            //  53 : 		UNRELATE cy FROM s ACROSS R6;
            //  54 : 		DELETE OBJECT INSTANCE s;
            //  55 : 		DELETE OBJECT INSTANCE cy;
            //  56 : 	END IF;
            //  57 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var candidatesOfaSet = instanceRepository.GetDomainInstances("A");
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfaSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", candidatesOfaSet, () => { return ""; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "many").Result;
            var aSet = new List<DomainClassA>();
            foreach (var candidateOfaSet in candidatesOfaSet)
            {
                aSet.Add((DomainClassA)candidateOfaSet);
            }

            // Line : 2
            foreach (var a in aSet)
            {
                // Line : 3
                var bSet = a.LinkedR1() as List<DomainClassB>;

                // Line : 4
                foreach (var b in bSet)
                {
                    // Line : 5
                    var cSet = b.LinkedR2() as List<DomainClassC>;

                    // Line : 6
                    foreach (var c in cSet)
                    {
                        // Line : 7
                        // Unrelate b From c Across R2
                        c.UnlinkR2(b, changedStates);

                        // Line : 8
                        var prevC = c.LinkedR3Successor();

                        // Line : 9
                        var nextC = c.LinkedR3Predecessor();

                        // Line : 10
                        if (prevC != null)
                        {
                            // Line : 11
                            // Unrelate prevC From c Across R3
                            c.UnlinkR3Successor(prevC, changedStates);

                        }

                        // Line : 13
                        if (nextC != null)
                        {
                            // Line : 14
                            // Unrelate c From nextC Across R3
                            nextC.UnlinkR3Successor(c, changedStates);

                        }

                        // Line : 16
                        var cx = c.LinkedR7();

                        // Line : 17
                        if (cx != null)
                        {
                            // Line : 18
                            if ((c.Attr_Number > 0))
                            {
                                // Line : 19
                                // Unrelate cx From c Across R7
                                cx.UnlinkR7IsTargetOf(c, changedStates);

                            }
                            else
                            {
                                // Line : 21
                                // Unrelate c From cx Across R7
                                cx.UnlinkR7IsTargetOf(c, changedStates);

                            }

                            // Line : 24
                            var s1 = cx.GetSuperClassR6();

                            // Line : 25
                            var rSet = s1.LinkedR5One() as List<DomainClassR>;

                            // Line : 26
                            foreach (var r in rSet)
                            {
                                // Line : 27
                                var d = r.LinkedR5One();

                                // Line : 28
                                if (((c.Attr_Number % 2) == 0))
                                {
                                    // Line : 29
                                    // Unrelate d From s1 Across R5 Using r
                                    r.UnlinkR5(d,s1);

                                }
                                else
                                {
                                    // Line : 31
                                    // Unrelate s1 From d Across R5 Using r
                                    r.UnlinkR5(d,s1);

                                }

                                // Line : 33
                                r.DeleteInstance(changedStates);
                            }

                            // Line : 35
                            // Unrelate cx From s1 Across R6
                            cx.UnlinkR6(s1, changedStates);

                            // Line : 36
                            s1.DeleteInstance(changedStates);
                            // Line : 37
                            cx.DeleteInstance(changedStates);
                        }

                    }

                }

            }

            // Line : 43
            var sTempSet = instanceRepository.GetDomainInstances("S");
            if (instanceRepository.ExternalStorageAdaptor != null) sTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "S", sTempSet, () => { return ""; }, () => { return DomainClassSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var s = (DomainClassS)(sTempSet.FirstOrDefault());

            // Line : 44
            if (s != null)
            {
                // Line : 45
                var cy = s.LinkedR6CY();

                // Line : 46
                if (cy != null)
                {
                    // Line : 47
                    var rSet = s.LinkedR5One() as List<DomainClassR>;

                    // Line : 48
                    foreach (var r in rSet)
                    {
                        // Line : 49
                        var d = r.LinkedR5One();

                        // Line : 50
                        // Unrelate s From d Across R5 Using r
                        r.UnlinkR5(d,s);

                        // Line : 51
                        r.DeleteInstance(changedStates);
                    }

                    // Line : 53
                    // Unrelate cy From s Across R6
                    cy.UnlinkR6(s, changedStates);

                    // Line : 54
                    s.DeleteInstance(changedStates);
                    // Line : 55
                    cy.DeleteInstance(changedStates);
                }

            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void QueryTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY a FROM INSTANCES OF A;
            //   2 : SELECT ANY a FROM INSTANCES OF A WHERE SELECTED.Number > 10;
            //   3 : SELECT ANY d RELATED BY a->D[R4];
            //   4 : SELECT ANY c RELATED BY a->B[R1]->C[R2] WHERE SELECTED.Number == 3;
            //   5 : SELECT MANY sSet RELATED BY d->S[R5];
            //   6 : SELECT MANY cSet RELATED BY a->B[R1]->C[R2] WHERE SELECTED.Number < 4;
            //   7 : SELECT MANY aSet FROM INSTANCES OF A;
            //   8 : SELECT MANY aSet FROM INSTANCES OF A WHERE SELECTED.Name == "test";
            //   9 : SELECT ANY b RELATED BY a->B[R1];
            //  10 : SELECT MANY bSet RELATED BY a->B[R1];
            //  11 : SELECT MANY bSet RELATED BY a->B[R1] WHERE SELECTED.Kind == KindOfB::Kind2;
            //  12 : SELECT ONE a RELATED BY b->A[R1];
            //  13 : SELECT MANY cSet RELATED BY bSet->C[R2];
            //  14 : SELECT MANY sSet RELATED BY d->A[R4]->B[R1]->C[R2]->CX[R7]->S[R6];
            //  15 : SELECT ANY cy RELATED BY a->D[R4]->S[R5]->CY[R6] WHERE SELECTED.Price == 100;
            //  16 : SELECT MANY cySet RELATED BY a->D[R4]->S[R5]->CY[R6] WHERE SELECTED.Price == 100;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            DomainClassDef selected = null;

            // Line : 1
            var aTempSet = instanceRepository.GetDomainInstances("A");
            if (instanceRepository.ExternalStorageAdaptor != null) aTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", aTempSet, () => { return ""; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var a = (DomainClassA)(aTempSet.FirstOrDefault());

            // Line : 2
            aTempSet = instanceRepository.GetDomainInstances("A").Where(selected => ((((DomainClassA)selected).Attr_Number > 10)));
            if (instanceRepository.ExternalStorageAdaptor != null) aTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", aTempSet, () => { return $"(Number > 10)"; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "any").Result;
            a = (DomainClassA)(aTempSet.FirstOrDefault());

            // Line : 3
            var d = a.LinkedR4().FirstOrDefault();

            // Line : 4
            DomainClassC c = null;
            var aIn0RL1Set = a.LinkedR1();
            foreach (var aIn0RL1 in aIn0RL1Set)
            {
                c = aIn0RL1.LinkedR2().Where(selected =>((((DomainClassC)selected).Attr_Number == 3))).FirstOrDefault();
                break;
            }

            // Line : 5
            List<DomainClassS> sSet = new List<DomainClassS>();
            var dIn0RL2Set = d.LinkedR5Other();
            foreach (var dIn0RL2 in dIn0RL2Set)
            {
                sSet.Add(dIn0RL2.LinkedR5Other());
            }

            // Line : 6
            List<DomainClassC> cSet = new List<DomainClassC>();
            var aIn0RL3Set = a.LinkedR1();
            foreach (var aIn0RL3 in aIn0RL3Set)
            {
                var cSetIn1RL3Set = aIn0RL3.LinkedR2().Where(selected =>((((DomainClassC)selected).Attr_Number < 4)));
                foreach (var cSetIn1RL3 in cSetIn1RL3Set) // test
                {
                    cSet.Add(cSetIn1RL3);
                }
            }

            // Line : 7
            var candidatesOfaSet = instanceRepository.GetDomainInstances("A");
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfaSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", candidatesOfaSet, () => { return ""; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "many").Result;
            var aSet = new List<DomainClassA>();
            foreach (var candidateOfaSet in candidatesOfaSet)
            {
                aSet.Add((DomainClassA)candidateOfaSet);
            }

            // Line : 8
            candidatesOfaSet = instanceRepository.GetDomainInstances("A").Where(selected => ((((DomainClassA)selected).Attr_Name == "test")));
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfaSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", candidatesOfaSet, () => { return $"(Name = 'test')"; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "many").Result;
            aSet = new List<DomainClassA>();
            foreach (var instance in candidatesOfaSet)
            {
                aSet.Add((DomainClassA)instance);
            }

            // Line : 9
            var b = a.LinkedR1().FirstOrDefault();

            // Line : 10
            var bSet = a.LinkedR1() as List<DomainClassB>;

            // Line : 11
            bSet = a.LinkedR1() as List<DomainClassB>;

            // Line : 12
            a = b.LinkedR1();

            // Line : 13
            cSet = new List<DomainClassC>();
            foreach (var bSetIn0RL8 in bSet)
            {
                var cSetIn1RL8Set = bSetIn0RL8.LinkedR2();
                foreach (var cSetIn1RL8 in cSetIn1RL8Set)
                {
                    cSet.Add(cSetIn1RL8);
                }
            }

            // Line : 14
            sSet = new List<DomainClassS>();
            var dIn0RL9 = d.LinkedR4();
            if (dIn0RL9 != null)
            {
                var dIn1RL9Set = dIn0RL9.LinkedR1();
                foreach (var dIn1RL9 in dIn1RL9Set)
                {
                    var dIn2RL9Set = dIn1RL9.LinkedR2();
                    foreach (var dIn2RL9 in dIn2RL9Set)
                    {
                        var dIn3RL9 = dIn2RL9.LinkedR7();
                        if (dIn3RL9 != null)
                        {
                            sSet.Add(dIn3RL9.GetSuperClassR6());
                        }
                    }
                }
            }

            // Line : 15
            DomainClassCY cy = null;
            var aIn0RL10Set = a.LinkedR4();
            foreach (var aIn0RL10 in aIn0RL10Set)
            {
                var aIn1RL10Set = aIn0RL10.LinkedR5Other();
                foreach (var aIn1RL10 in aIn1RL10Set)
                {
                    selected = aIn1RL10.LinkedR5Other().LinkedR6CY();
                    if (((DomainClassCY)selected).Attr_Price == 100)
                    {
                        cy = (DomainClassCY)selected;
                        break;
                    }
                }
                if (cy != null) break;
            }

            // Line : 16
            List<DomainClassCY> cySet = new List<DomainClassCY>();
            var aIn0RL11Set = a.LinkedR4();
            foreach (var aIn0RL11 in aIn0RL11Set)
            {
                var aIn1RL11Set = aIn0RL11.LinkedR5Other();
                foreach (var aIn1RL11 in aIn1RL11Set)
                {
                    cySet.Add(aIn1RL11.LinkedR5Other().LinkedR6CY());
                }
            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public bool ReturnTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : Return true;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            instanceRepository.SyncChangedStates(changedStates);
            return true;


        }
        public void InvokeTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : SELECT ANY b FROM INSTANCES OF B;
            //  2 : b.ChangeKind();
            //  3 : result = ::ReturnTest();
            //  4 : SELECT one a RELATED BY b->A[R1];
            //  5 : iresult = a.SetTest( s:"test", x:3 );
            //  6 : ::QueryTest();
            //  7 : a.Number = - a.Number;
            //  8 : ExtTest::Test();


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // External Entities Reference Declarations.
            var _eeExtTestRef_ = (ExternalEntities.ExtTestWrapper)instanceRepository.GetExternalEntity("ExtTest");

            // Line : 1
            var bTempSet = instanceRepository.GetDomainInstances("B");
            if (instanceRepository.ExternalStorageAdaptor != null) bTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "B", bTempSet, () => { return ""; }, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var b = (DomainClassB)(bTempSet.FirstOrDefault());

            // Line : 2
            b.ChangeKind();
            // Line : 3
            var result = this.ReturnTest();
            // Line : 4
            var a = b.LinkedR1();

            // Line : 5
            var iresult = a.SetTest(s:"test", x:3);
            // Line : 6
            this.QueryTest();
            // Line : 7
            a.Attr_Number = -a.Attr_Number;
            // Line : 8
            _eeExtTestRef_.Test();

            instanceRepository.SyncChangedStates(changedStates);
        }
        public void RelateTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY cx FROM INSTANCES OF CX;
            //   2 : SELECT ONE s RELATED BY cx->S[R6];
            //   3 : SELECT MANY R RELATED BY cx->S[R6]->R[R5];
            //   4 : SELECT MANY D1 RELATED BY cx->S[R6]->R[R5]->D[R5];
            //   5 : SELECT MANY D2 RELATED BY cx->S[R6]->D[R5];
            //   6 : SELECT MANY aSet RELATED BY cx->S[R6]->D[R5]->A[R4];
            //   7 : SELECT MANY bSet RELATED BY cx->S[R6]->R[R5]->D[R5]->A[R4]->B[R1];
            //   8 : 
            //   9 : SELECT ANY g1 FROM INSTANCES OF G;
            //  10 : SELECT ANY h1 FROM INSTANCES OF H;
            //  11 : CREATE OBJECT INSTANCE i1 OF I;
            //  12 : RELATE g1 TO h1 ACROSS R8 USING i1;
            //  13 : UNRELATE g1 FROM h1 ACROSS R8 USING i1;
            //  14 : RELATE h1 TO g1 ACROSS R8 USING i1;
            //  15 : UNRELATE h1 FROM g1 ACROSS R8 USING i1;
            //  16 : RELATE g1 TO h1 ACROSS R8.right USING i1;
            //  17 : UNRELATE g1 FROM h1 ACROSS R8.right USING i1;
            //  18 : RELATE h1 TO g1 ACROSS R8.'left' USING i1;
            //  19 : 
            //  20 : CREATE OBJECT INSTANCE g2 OF G;
            //  21 : CREATE OBJECT INSTANCE h2  OF H;
            //  22 : CREATE OBJECT INSTANCE i2 OF I;
            //  23 : RELATE g2 TO h2 ACROSS R8 USING i2;
            //  24 : 
            //  25 : CREATE OBJECT INSTANCE oi1 OF OI;
            //  26 : RELATE i1 TO i2 ACROSS R9.'next' USING oi1;
            //  27 : UNRELATE i1 FROM i2 ACROSS R9.'next' USING oi1;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var cxTempSet = instanceRepository.GetDomainInstances("CX");
            if (instanceRepository.ExternalStorageAdaptor != null) cxTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "CX", cxTempSet, () => { return ""; }, () => { return DomainClassCXBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var cx = (DomainClassCX)(cxTempSet.FirstOrDefault());

            // Line : 2
            var s = cx.GetSuperClassR6();

            // Line : 3
            List<DomainClassR> R = new List<DomainClassR>();
            var RIn0RL1Set = cx.GetSuperClassR6().LinkedR5One();
            foreach (var RIn0RL1 in RIn0RL1Set)
            {
                R.Add(RIn0RL1);
            }

            // Line : 4
            List<DomainClassD> D1 = new List<DomainClassD>();
            var cxIn0RL2Set = cx.GetSuperClassR6().LinkedR5One();
            foreach (var cxIn0RL2 in cxIn0RL2Set)
            {
                D1.Add(cxIn0RL2.LinkedR5One());
            }

            // Line : 5
            List<DomainClassD> D2 = new List<DomainClassD>();
            var cxIn0RL3Set = cx.GetSuperClassR6().LinkedR5One();
            foreach (var cxIn0RL3 in cxIn0RL3Set)
            {
                D2.Add(cxIn0RL3.LinkedR5One());
            }

            // Line : 6
            List<DomainClassA> aSet = new List<DomainClassA>();
            var cxIn0RL4Set = cx.GetSuperClassR6().LinkedR5One();
            foreach (var cxIn0RL4 in cxIn0RL4Set)
            {
                var aSetIn1RL4 = cxIn0RL4.LinkedR5One().LinkedR4();
                if (aSetIn1RL4 != null)
                {
                    aSet.Add(aSetIn1RL4);
                }
            }

            // Line : 7
            List<DomainClassB> bSet = new List<DomainClassB>();
            var cxIn0RL5Set = cx.GetSuperClassR6().LinkedR5One();
            foreach (var cxIn0RL5 in cxIn0RL5Set)
            {
                var cxIn1RL5 = cxIn0RL5.LinkedR5One().LinkedR4();
                if (cxIn1RL5 != null)
                {
                    var bSetIn2RL5Set = cxIn1RL5.LinkedR1();
                    foreach (var bSetIn2RL5 in bSetIn2RL5Set)
                    {
                        bSet.Add(bSetIn2RL5);
                    }
                }
            }

            // Line : 9
            var g1TempSet = instanceRepository.GetDomainInstances("G");
            if (instanceRepository.ExternalStorageAdaptor != null) g1TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "G", g1TempSet, () => { return ""; }, () => { return DomainClassGBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var g1 = (DomainClassG)(g1TempSet.FirstOrDefault());

            // Line : 10
            var h1TempSet = instanceRepository.GetDomainInstances("H");
            if (instanceRepository.ExternalStorageAdaptor != null) h1TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "H", h1TempSet, () => { return ""; }, () => { return DomainClassHBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var h1 = (DomainClassH)(h1TempSet.FirstOrDefault());

            // Line : 11
            var i1 = DomainClassIBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 12
            // Relate g1 - R8 -> h1 USING i1
            i1.LinkR8(g1,h1);

            // Line : 13
            // Unrelate g1 From h1 Across R8 Using i1
            i1.UnlinkR8(g1,h1);

            // Line : 14
            // Relate h1 - R8 -> g1 USING i1
            i1.LinkR8(g1,h1);

            // Line : 15
            // Unrelate h1 From g1 Across R8 Using i1
            i1.UnlinkR8(g1,h1);

            // Line : 16
            // Relate g1 - R8 -> h1 USING i1
            i1.LinkR8(g1,h1);

            // Line : 17
            // Unrelate g1 From h1 Across R8 Using i1
            i1.UnlinkR8(g1,h1);

            // Line : 18
            // Relate h1 - R8 -> g1 USING i1
            i1.LinkR8(g1,h1);

            // Line : 20
            var g2 = DomainClassGBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 21
            var h2 = DomainClassHBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 22
            var i2 = DomainClassIBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 23
            // Relate g2 - R8 -> h2 USING i2
            i2.LinkR8(g2,h2);

            // Line : 25
            var oi1 = DomainClassOIBase.CreateInstance(instanceRepository, logger, changedStates);
            // Line : 26
            // Relate i1 - R9 -> i2 USING oi1
            oi1.LinkR9(i2,i1);

            // Line : 27
            // Unrelate i1 From i2 Across R9 Using oi1
            oi1.UnlinkR9(i2,i1);


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void EventTest()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : GENERATE B_A1 TO B ASSIGNER;
            //   2 : CREATE EVENT INSTANCE baEvent OF B_A1 TO B ASSIGNER;
            //   3 : SELECT ANY a FROM INSTANCES OF A;
            //   4 : GENERATE A1(name:"test", number:3) TO a;
            //   5 : CREATE EVENT INSTANCE e OF A1(name:"foo", number:4) TO a;
            //   6 : GENERATE e;
            //   7 : SELECT ANY b FROM INSTANCES OF B;
            //   8 : SELECT ANY s FROM INSTANCES OF S;
            //   9 : GENERATE C1(b_id:b.B_ID, s_id:s.S_ID) TO C Creator;
            //  10 : CREATE EVENT INSTANCE ec OF C1(b_id:b.B_ID, s_id:s.S_ID) TO C Creator;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            // This generator doesn't support Class State Machine.
            // DomainClassBStateMachine.B_1_DoSome.Create(sendNow:true);

            // Line : 2
            // This generator doesn't support Class State Machine.
            // DomainClassBStateMachine.B_1_DoSome.Create(isSelfEvent:false, sendNow:false);

            // Line : 3
            var aTempSet = instanceRepository.GetDomainInstances("A");
            if (instanceRepository.ExternalStorageAdaptor != null) aTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "A", aTempSet, () => { return ""; }, () => { return DomainClassABase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var a = (DomainClassA)(aTempSet.FirstOrDefault());

            // Line : 4
            if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
            {
                changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = a, Event = DomainClassAStateMachine.A_1_Update.Create(receiver:a, name:"test", number:3, false, sendNow:false) });
            }
            else
            {
                DomainClassAStateMachine.A_1_Update.Create(receiver:a, name:"test", number:3, isSelfEvent:false, sendNow:true);
            }

            // Line : 5
            var e = DomainClassAStateMachine.A_1_Update.Create(receiver:a, name:"foo", number:4, isSelfEvent:false, sendNow:false);
            if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
            {
                changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = a, Event = e });
            }

            // Line : 6
            e.Send();

            // Line : 7
            var bTempSet = instanceRepository.GetDomainInstances("B");
            if (instanceRepository.ExternalStorageAdaptor != null) bTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "B", bTempSet, () => { return ""; }, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var b = (DomainClassB)(bTempSet.FirstOrDefault());

            // Line : 8
            var sTempSet = instanceRepository.GetDomainInstances("S");
            if (instanceRepository.ExternalStorageAdaptor != null) sTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "S", sTempSet, () => { return ""; }, () => { return DomainClassSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var s = (DomainClassS)(sTempSet.FirstOrDefault());

            // Line : 9
            DomainClassCStateMachine.C_1_Create.Create(receiver:null, b_id:b.Attr_B_ID, s_id:s.Attr_S_ID, isSelfEvent:false, sendNow:true, instanceRepository:instanceRepository, logger:logger);

            // Line : 10
            var ec = DomainClassCStateMachine.C_1_Create.Create(receiver:null, b_id:b.Attr_B_ID, s_id:s.Attr_S_ID, isSelfEvent:false, sendNow:false, instanceRepository:instanceRepository, logger:logger);
            if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
            {
                changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = null, Event = ec });
            }


            instanceRepository.SyncChangedStates(changedStates);
        }

        public IList<string> CreateExternalEntities()
        {
            var configuration = new List<string>();

            instanceRepository.Add(new Kae.DomainModel.Csharp.Framework.ExternalEntities.TIM.impl.TIMImpl());
            var refOfTIM = instanceRepository.GetExternalEntity("TIM");
            configuration.AddRange(refOfTIM.ConfigurationKeys);
            return configuration;
        }
        public void Initialize(IDictionary<string, IDictionary<string, object>> configuration)
        {
            var refOfTIM = instanceRepository.GetExternalEntity("TIM");
            refOfTIM.Initialize(configuration["TIM"]);
        }
    }
}
