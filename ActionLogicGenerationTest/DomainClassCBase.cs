// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ActionLogicGenerationTest
{
    public partial class DomainClassCBase : DomainClassC
    {
        protected static readonly string className = "C";

        public string DomainName { get { return CIMActionLogicGenerationTestLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"C_ID={attr_C_ID}"; }

        public static DomainClassCBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassCBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={newInstance.Attr_C_ID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassCBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_C_ID = Guid.NewGuid().ToString();
            stateof_C_ID = true;
            stateMachine = new DomainClassCStateMachine(this, synchronousMode, instanceRepository, logger);
        }
        protected string attr_C_ID;
        protected bool stateof_C_ID = false;

        protected int attr_Number;
        protected bool stateof_Number = false;

        protected string attr_B_ID;
        protected bool stateof_B_ID = false;

        protected string attr_Successor_C_ID;
        protected bool stateof_Successor_C_ID = false;

        protected DateTime attr_CreatedTime;
        protected bool stateof_CreatedTime = false;

        protected DomainClassCStateMachine stateMachine;
        protected bool stateof_current_state = false;

        public string Attr_C_ID { get { return attr_C_ID; } set { attr_C_ID = value; stateof_C_ID = true; } }
        public int Attr_Number { get { return attr_Number; } set { attr_Number = value; stateof_Number = true; } }
        public string Attr_B_ID { get { return attr_B_ID; } }
        public string Attr_Successor_C_ID { get { return attr_Successor_C_ID; } }
        public DateTime Attr_CreatedTime { get { return attr_CreatedTime; } set { attr_CreatedTime = value; stateof_CreatedTime = true; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassC instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "C_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_C_ID)
                        {
                            result = false;
                        }
                        break;
                    case "Number":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Number)
                        {
                            result = false;
                        }
                        break;
                    case "B_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_B_ID)
                        {
                            result = false;
                        }
                        break;
                    case "Successor_C_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Successor_C_ID)
                        {
                            result = false;
                        }
                        break;
                    case "CreatedTime":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_CreatedTime)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR2B;
        protected LinkedInstance relR3CSuccessor;
        public DomainClassB LinkedR2()
        {
            if (relR2B == null)
            {
                var candidates = instanceRepository.GetDomainInstances("B").Where(inst=>(this.Attr_B_ID==((DomainClassB)inst).Attr_B_ID));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "B", "R2", candidates, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR2B = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R2", Phrase = "" };

            }
            return relR2B.GetDestination<DomainClassB>();
        }

        public bool LinkR2(DomainClassB instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR2B == null)
            {
                this.attr_B_ID = instance.Attr_B_ID;
                this.stateof_B_ID = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):link[B(B_ID={instance.Attr_B_ID})]");

                result = (LinkedR2()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR2B });
                }
            }
            return result;
        }

        public bool UnlinkR2(DomainClassB instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR2B != null && ( this.Attr_B_ID==instance.Attr_B_ID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR2B });
        
                this.attr_B_ID = null;
                this.stateof_B_ID = true;
                relR2B = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):unlink[B(B_ID={instance.Attr_B_ID})]");


                result = true;
            }
            return result;
        }
        public DomainClassC LinkedR3Successor()
        {
            if (relR3CSuccessor == null)
            {
                var candidates = instanceRepository.GetDomainInstances("C").Where(inst=>(this.Attr_Successor_C_ID==((DomainClassC)inst).Attr_C_ID));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "C", "R3", candidates, () => { return DomainClassCBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR3CSuccessor = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R3", Phrase = "Successor" };

            }
            return relR3CSuccessor.GetDestination<DomainClassC>();
        }

        public bool LinkR3Successor(DomainClassC instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR3CSuccessor == null)
            {
                this.attr_Successor_C_ID = instance.Attr_C_ID;
                this.stateof_Successor_C_ID = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):link[C(C_ID={instance.Attr_C_ID})]");

                result = (LinkedR3Successor()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR3CSuccessor });
                }
            }
            return result;
        }

        public bool UnlinkR3Successor(DomainClassC instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR3CSuccessor != null && ( this.Attr_Successor_C_ID==instance.Attr_C_ID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR3CSuccessor });
        
                this.attr_Successor_C_ID = null;
                this.stateof_Successor_C_ID = true;
                relR3CSuccessor = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):unlink[C(C_ID={instance.Attr_C_ID})]");


                result = true;
            }
            return result;
        }
        public DomainClassC LinkedR3Predecessor()
        {
            var candidates = instanceRepository.GetDomainInstances("C").Where(inst=>(this.Attr_C_ID==((DomainClassC)inst).Attr_Successor_C_ID));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "C", "R3", candidates, () => { return DomainClassCBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassC)candidates.FirstOrDefault()).LinkedR3Successor();
            }
            return (DomainClassC)candidates.FirstOrDefault();
        }
        public DomainClassCX LinkedR7()
        {
            var candidates = instanceRepository.GetDomainInstances("CX").Where(inst=>(this.Attr_C_ID==((DomainClassCX)inst).Attr_C_ID));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "CX", "R7", candidates, () => { return DomainClassCXBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassCX)candidates.FirstOrDefault()).LinkedR7IsTargetOf();
            }
            return (DomainClassCX)candidates.FirstOrDefault();
        }


        public void TakeEvent(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                stateMachine.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                stateMachine.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (relR2B == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:C(C_ID={this.Attr_C_ID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("C_ID"))
            {
// should adopt timer setting
                attr_C_ID = (string)propertyValues["C_ID"];
            }
            stateof_C_ID = false;
            if (propertyValues.ContainsKey("Number"))
            {
// should adopt timer setting
                attr_Number = (int)propertyValues["Number"];
            }
            stateof_Number = false;
            if (propertyValues.ContainsKey("B_ID"))
            {
// should adopt timer setting
                attr_B_ID = (string)propertyValues["B_ID"];
            }
            stateof_B_ID = false;
            if (propertyValues.ContainsKey("Successor_C_ID"))
            {
// should adopt timer setting
                attr_Successor_C_ID = (string)propertyValues["Successor_C_ID"];
            }
            stateof_Successor_C_ID = false;
            if (propertyValues.ContainsKey("CreatedTime"))
            {
// should adopt timer setting
                if (propertyValues["CreatedTime"] is string)
                {
                    attr_CreatedTime = DateTime.Parse((string)propertyValues["CreatedTime"]);
                }
                else
                {
                    attr_CreatedTime = (DateTime)propertyValues["CreatedTime"];
                }
            }
            stateof_CreatedTime = false;
            if (propertyValues.ContainsKey("current_state"))
            {
                stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            }
            stateof_current_state = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_C_ID)
            {
                results.Add("C_ID", attr_C_ID);
                stateof_C_ID = false;
            }
            if (stateof_Number)
            {
                results.Add("Number", attr_Number);
                stateof_Number = false;
            }
            if (stateof_B_ID)
            {
                results.Add("B_ID", attr_B_ID);
                stateof_B_ID = false;
            }
            if (stateof_Successor_C_ID)
            {
                results.Add("Successor_C_ID", attr_Successor_C_ID);
                stateof_Successor_C_ID = false;
            }
            if (stateof_CreatedTime)
            {
                results.Add("CreatedTime", attr_CreatedTime);
                stateof_CreatedTime = false;
            }
            results.Add("current_state", $"{stateMachine.CurrentState}");


            return results;
        }

        public string GetIdentities()
        {
            string identities = $"C_ID={this.Attr_C_ID}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("C_ID", attr_C_ID);
            if (!onlyIdentity) results.Add("Number", attr_Number);
            if (!onlyIdentity) results.Add("B_ID", attr_B_ID);
            if (!onlyIdentity) results.Add("Successor_C_ID", attr_Successor_C_ID);
            if (!onlyIdentity) results.Add("CreatedTime", attr_CreatedTime);
            if (!onlyIdentity) results.Add("current_state", stateMachine.CurrentState);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
