// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;

namespace ActionLogicGenerationTest
{

    public interface DomainClassA : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_A_ID { get; }
        string Attr_Name { get; set; }
        int Attr_Number { get; set; }
        int Attr_current_state { get; }
        int Attr_MathProperty { get; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 


        public IEnumerable<DomainClassB> LinkedR1();

        public IEnumerable<DomainClassD> LinkedR4();


        // Conceptual Information Class's Operations

        public int SetTest(string s, int x);



    }

    public interface DomainClassB : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_B_ID { get; }
        string Attr_A_ID { get; }
        int Attr_NumberOfC { get; }
        DomainTypeKindOfB Attr_Kind { get; set; }


        // Relationships 

        public DomainClassA LinkedR1();

        public bool LinkR1(DomainClassA instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR1(DomainClassA instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassC> LinkedR2();


        // Conceptual Information Class's Operations

        public void ChangeKind();



    }

    public interface DomainClassC : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_C_ID { get; }
        int Attr_Number { get; set; }
        string Attr_B_ID { get; }
        string Attr_Successor_C_ID { get; }
        DateTime Attr_CreatedTime { get; set; }
        int Attr_current_state { get; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassB LinkedR2();

        public bool LinkR2(DomainClassB instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR2(DomainClassB instance, IList<ChangedState> changedStates=null);
        public DomainClassC LinkedR3Successor();

        public bool LinkR3Successor(DomainClassC instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR3Successor(DomainClassC instance, IList<ChangedState> changedStates=null);
        public DomainClassC LinkedR3Predecessor();
        public DomainClassCX LinkedR7();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassCX : DomainClassDef, SubClassR6
    {
        // Conceptual Information Class's Properties

        string Attr_S_ID { get; }
        string Attr_C_ID { get; }


        // Relationships 

        public bool LinkR6(DomainClassS instance, IList<ChangedState> changedStates=null);
        public bool UnlinkR6(DomainClassS instance, IList<ChangedState> changedStates=null);
        public DomainClassC LinkedR7IsTargetOf();

        public bool LinkR7IsTargetOf(DomainClassC instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR7IsTargetOf(DomainClassC instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassS : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_S_ID { get; }


        // Relationships 


        public IEnumerable<DomainClassR> LinkedR5One();

        public SubClassR6 GetSubR6();

        public DomainClassCX LinkedR6CX();

        public DomainClassCY LinkedR6CY();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassCY : DomainClassDef, SubClassR6
    {
        // Conceptual Information Class's Properties

        string Attr_S_ID { get; }
        int Attr_Price { get; set; }


        // Relationships 

        public bool LinkR6(DomainClassS instance, IList<ChangedState> changedStates=null);
        public bool UnlinkR6(DomainClassS instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassD : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_D_ID { get; }
        string Attr_A_ID { get; }
        DomainTypeComplexData Attr_ComplexValue { get; set; }
        double Attr_RealValue { get; set; }


        // Relationships 

        public DomainClassA LinkedR4();

        public bool LinkR4(DomainClassA instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR4(DomainClassA instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassR> LinkedR5Other();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassG : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_G_ID { get; }


        // Relationships 


        public IEnumerable<DomainClassI> LinkedR8OtherRight();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassH : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_H_ID { get; }


        // Relationships 


        public IEnumerable<DomainClassI> LinkedR8OneLeft();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassI : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_I_ID { get; }
        string Attr_leftG_ID { get; }
        string Attr_rightH_ID { get; }


        // Relationships 

        public bool LinkR8(DomainClassG oneInstanceLeft, DomainClassH otherInstanceRight, IList<ChangedState> changedStates=null);
        public bool UnlinkR8(DomainClassG oneInstanceLeft, DomainClassH otherInstanceRight, IList<ChangedState> changedStates=null);
        public DomainClassG LinkedR8OneLeft();
        public DomainClassH LinkedR8OtherRight();
        public DomainClassOI LinkedR9OtherPrev();

        public DomainClassOI LinkedR9OneNext();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassOI : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_prevI_ID { get; }
        string Attr_nextG_ID { get; }
        string Attr_nextH_ID { get; }
        int Attr_Order { get; set; }


        // Relationships 

        public bool LinkR9(DomainClassI oneInstanceNext, DomainClassI otherInstancePrev, IList<ChangedState> changedStates=null);
        public bool UnlinkR9(DomainClassI oneInstanceNext, DomainClassI otherInstancePrev, IList<ChangedState> changedStates=null);
        public DomainClassI LinkedR9OneNext();
        public DomainClassI LinkedR9OtherPrev();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassR : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_D_ID { get; }
        string Attr_S_ID { get; }


        // Relationships 

        public bool LinkR5(DomainClassD oneInstance, DomainClassS otherInstance, IList<ChangedState> changedStates=null);
        public bool UnlinkR5(DomainClassD oneInstance, DomainClassS otherInstance, IList<ChangedState> changedStates=null);
        public DomainClassD LinkedR5One();
        public DomainClassS LinkedR5Other();


        // Conceptual Information Class's Operations



    }
}
