// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ActionLogicGenerationTest
{
    public partial class DomainClassABase : DomainClassA
    {
        protected static readonly string className = "A";

        public string DomainName { get { return CIMActionLogicGenerationTestLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"A_ID={attr_A_ID}"; }

        public static DomainClassABase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassABase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:A(A_ID={newInstance.Attr_A_ID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassABase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_A_ID = Guid.NewGuid().ToString();
            stateof_A_ID = true;
            stateMachine = new DomainClassAStateMachine(this, synchronousMode, instanceRepository, logger);
        }
        protected string attr_A_ID;
        protected bool stateof_A_ID = false;

        protected string attr_Name;
        protected bool stateof_Name = false;

        protected int attr_Number;
        protected bool stateof_Number = false;

        protected DomainClassAStateMachine stateMachine;
        protected bool stateof_current_state = false;

        protected int attr_MathProperty;
        protected bool stateof_MathProperty = false;

        public string Attr_A_ID { get { return attr_A_ID; } set { attr_A_ID = value; stateof_A_ID = true; } }
        public string Attr_Name { get { return attr_Name; } set { attr_Name = value; stateof_Name = true; } }
        public int Attr_Number { get { return attr_Number; } set { attr_Number = value; stateof_Number = true; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }
        public int Attr_MathProperty
        {
            protected set { attr_MathProperty = value; stateof_MathProperty = true; }
            get
            {
                // Line : 1
                var bSet = this.LinkedR1() as List<DomainClassB>;

                // Line : 2
                this.Attr_MathProperty = (bSet.Count() + this.Attr_Number);

                return attr_MathProperty;
            }
        }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassA instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "A_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_A_ID)
                        {
                            result = false;
                        }
                        break;
                    case "Name":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Name)
                        {
                            result = false;
                        }
                        break;
                    case "Number":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Number)
                        {
                            result = false;
                        }
                        break;
                    case "MathProperty":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_MathProperty)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        public IEnumerable<DomainClassB> LinkedR1()
        {
            var result = new List<DomainClassB>();
            var candidates = instanceRepository.GetDomainInstances("B").Where(inst=>(this.Attr_A_ID==((DomainClassB)inst).Attr_A_ID));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "B", "R1", candidates, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassB)c).LinkedR1();
                result.Add((DomainClassB)c);
            }
            return result;
        }


        public IEnumerable<DomainClassD> LinkedR4()
        {
            var result = new List<DomainClassD>();
            var candidates = instanceRepository.GetDomainInstances("D").Where(inst=>(this.Attr_A_ID==((DomainClassD)inst).Attr_A_ID));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "D", "R4", candidates, () => { return DomainClassDBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassD)c).LinkedR4();
                result.Add((DomainClassD)c);
            }
            return result;
        }



        public void TakeEvent(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                stateMachine.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                stateMachine.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:A(A_ID={this.Attr_A_ID}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (this.LinkedR1().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:A(A_ID={this.Attr_A_ID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("A_ID"))
            {
// should adopt timer setting
                attr_A_ID = (string)propertyValues["A_ID"];
            }
            stateof_A_ID = false;
            if (propertyValues.ContainsKey("Name"))
            {
// should adopt timer setting
                attr_Name = (string)propertyValues["Name"];
            }
            stateof_Name = false;
            if (propertyValues.ContainsKey("Number"))
            {
// should adopt timer setting
                attr_Number = (int)propertyValues["Number"];
            }
            stateof_Number = false;
            if (propertyValues.ContainsKey("current_state"))
            {
                stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            }
            stateof_current_state = false;
            if (propertyValues.ContainsKey("MathProperty"))
            {
// should adopt timer setting
                attr_MathProperty = (int)propertyValues["MathProperty"];
            }
            stateof_MathProperty = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_A_ID)
            {
                results.Add("A_ID", attr_A_ID);
                stateof_A_ID = false;
            }
            if (stateof_Name)
            {
                results.Add("Name", attr_Name);
                stateof_Name = false;
            }
            if (stateof_Number)
            {
                results.Add("Number", attr_Number);
                stateof_Number = false;
            }
            results.Add("current_state", $"{stateMachine.CurrentState}");

            if (stateof_MathProperty)
            {
                results.Add("MathProperty", attr_MathProperty);
                stateof_MathProperty = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"A_ID={this.Attr_A_ID}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("A_ID", attr_A_ID);
            if (!onlyIdentity) results.Add("Name", attr_Name);
            if (!onlyIdentity) results.Add("Number", attr_Number);
            if (!onlyIdentity) results.Add("current_state", stateMachine.CurrentState);
            if (!onlyIdentity) results.Add("MathProperty", attr_MathProperty);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
