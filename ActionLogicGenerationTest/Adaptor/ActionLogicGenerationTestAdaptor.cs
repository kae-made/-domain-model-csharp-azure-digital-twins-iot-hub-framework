// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Azure.Core;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ActionLogicGenerationTest.Adaptor
{
    // Entry for Application front end.
    public static class DomainModelAdaptorEntry
    {
        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();
        public static DomainModelAdaptor GetAdaptor(Logger logger) { foreach (var k in Configuration.Keys) { ActionLogicGenerationTestAdaptor.Configuration.Add(k, Configuration[k]); } return ActionLogicGenerationTestAdaptor.GetInstance(logger); }
    }

    public class ActionLogicGenerationTestAdaptor : DomainModelAdaptor
    {
        CIMActionLogicGenerationTestLib domainModel;

        public static DomainModelAdaptor adapterInstance = null;

        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();

        public static DomainModelAdaptor GetInstance(Logger logger)
        {
            if (adapterInstance == null)
            {
                var instanceRepository = new InstanceRepositoryInMemory(logger);

                var cimLib = new CIMActionLogicGenerationTestLib(instanceRepository);
                adapterInstance = new ActionLogicGenerationTestAdaptor(cimLib, logger);
            }
            return adapterInstance;
        }

        public override IDictionary<string, IList<string>> ConfigurationKeys()
        {
            var configurationKeys = new Dictionary<string, IList<string>>();

            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                configurationKeys.Add(externalEntity.EEKey, new List<string>());
                foreach(var cKey in externalEntity.ConfigurationKeys)
                {
                    configurationKeys[externalEntity.EEKey].Add(cKey);
                }
            }

            // for Azure Digital Twins Adaptor
            configurationKeys.Add("AzureDigitalTwins", new List<string>());
            configurationKeys["AzureDigitalTwins"].Add("ADTInstanceUri");
            configurationKeys["AzureDigitalTwins"].Add("ADTCredential");

            return configurationKeys;
        }

        public override void Initialize(IDictionary<string, IDictionary<string, object>> config)
        {
            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                externalEntity.Initialize(config[externalEntity.EEKey]);
            }

            // for Azure Digital Twins
            string adtInstanceUri = (string)config["AzureDigitalTwins"]["ADTInstanceUri"];
            TokenCredential adtCredential = (TokenCredential)config["AzureDigitalTwins"]["ADTCredential"];
            var azureDigitalTwinsAdaptor = new ActionLogicGenerationTestAzureDigitalTwinsAdaptor(adtInstanceUri, adtCredential, domainModel.InstanceRepository, logger);
            azureDigitalTwinsAdaptor.Initialize();
            domainModel.InstanceRepository.ExternalStorageAdaptor = azureDigitalTwinsAdaptor;
        }

        public ActionLogicGenerationTestAdaptor(CIMActionLogicGenerationTestLib domainModel, Logger logger) : base(logger)
        {
            this.domainModel = domainModel;
            domainOpsParamSpecs = _domainOpsParamSpecs;
            classSpecs = _classSpecs;
            domainModelName = "ActionLogicGenerationTest";
        }

        protected Dictionary<string, Dictionary<string, ParamSpec>> _domainOpsParamSpecs = new Dictionary<string, Dictionary<string, ParamSpec>>()
        {
            {
                "CreateTest", new Dictionary<string, ParamSpec>()
                {
                    { "numOfB", new ParamSpec() {Name = "numOfB", TypeKind = ParamSpec.DataType.Integer, IsArray = false} },
                    { "x", new ParamSpec() {Name = "x", TypeKind = ParamSpec.DataType.Integer, IsArray = false} },
                    { "y", new ParamSpec() {Name = "y", TypeKind = ParamSpec.DataType.Integer, IsArray = false} }
                }
            },
            {
                "DeleteTest", new Dictionary<string, ParamSpec>()
            },
            {
                "QueryTest", new Dictionary<string, ParamSpec>()
            },
            {
                "ReturnTest", new Dictionary<string, ParamSpec>()
            },
            {
                "InvokeTest", new Dictionary<string, ParamSpec>()
            },
            {
                "RelateTest", new Dictionary<string, ParamSpec>()
            },
            {
                "EventTest", new Dictionary<string, ParamSpec>()
            }
        };

        protected Dictionary<string, ClassSpec> _classSpecs = new Dictionary<string, ClassSpec>()
        {
            {
                "A", new ClassSpec()
                {                
                    Name = "A",
                    KeyLetter = "A",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "A_ID", new PropSpec()
                            { Name = "A_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Number", new PropSpec()
                            { Name = "Number", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "MathProperty", new PropSpec()
                            { Name = "MathProperty", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = true, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "SetTest", new OperationSpec()
                            {
                                Name = "SetTest", ReturnType = ParamSpec.DataType.Integer, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "s", new ParamSpec() {Name = "s", TypeKind = ParamSpec.DataType.String, IsArray = false} },
                                    { "x", new ParamSpec() {Name = "x", TypeKind = ParamSpec.DataType.Integer, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "B[R1]", new LinkSpec()
                            { Name = "B[R1]", RelID = "R1", Phrase = "", Set = true, Condition = false, DstKeyLett = "B" }
                        },
                        {
                            "D[R4]", new LinkSpec()
                            { Name = "D[R4]", RelID = "R4", Phrase = "", Set = true, Condition = true, DstKeyLett = "D" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "A_1_Update", new OperationSpec()
                            {
                                Name = "A_1_Update", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "name", new ParamSpec() {Name = "name", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "number", new ParamSpec() {Name = "number", TypeKind = ParamSpec.DataType.Integer, IsArray = false} }
                                }
                            }
                        }
                    }
                }
            },
            {
                "B", new ClassSpec()
                {                
                    Name = "B",
                    KeyLetter = "B",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "B_ID", new PropSpec()
                            { Name = "B_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "A_ID", new PropSpec()
                            { Name = "A_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "NumberOfC", new PropSpec()
                            { Name = "NumberOfC", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = true, Reference = false, StateMachineState = false }
                        },
                        {
                            "Kind", new PropSpec()
                            { Name = "Kind", DataType = ParamSpec.DataType.Enum, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "ChangeKind", new OperationSpec()
                            {
                                Name = "ChangeKind", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "C[R2]", new LinkSpec()
                            { Name = "C[R2]", RelID = "R2", Phrase = "", Set = true, Condition = true, DstKeyLett = "C" }
                        },
                        {
                            "A[R1]", new LinkSpec()
                            { Name = "A[R1]", RelID = "R1", Phrase = "", Set = false, Condition = false, DstKeyLett = "A" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "C", new ClassSpec()
                {                
                    Name = "C",
                    KeyLetter = "C",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "C_ID", new PropSpec()
                            { Name = "C_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Number", new PropSpec()
                            { Name = "Number", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "B_ID", new PropSpec()
                            { Name = "B_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Successor_C_ID", new PropSpec()
                            { Name = "Successor_C_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "CreatedTime", new PropSpec()
                            { Name = "CreatedTime", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "C[R3.'predecessor']", new LinkSpec()
                            { Name = "C[R3.'predecessor']", RelID = "R3", Phrase = "predecessor", Set = false, Condition = true, DstKeyLett = "C" }
                        },
                        {
                            "CX[R7]", new LinkSpec()
                            { Name = "CX[R7]", RelID = "R7", Phrase = "", Set = false, Condition = true, DstKeyLett = "CX" }
                        },
                        {
                            "B[R2]", new LinkSpec()
                            { Name = "B[R2]", RelID = "R2", Phrase = "", Set = false, Condition = false, DstKeyLett = "B" }
                        },
                        {
                            "C[R3.'successor']", new LinkSpec()
                            { Name = "C[R3.'successor']", RelID = "R3", Phrase = "successor", Set = false, Condition = true, DstKeyLett = "C" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "C_1_Create", new OperationSpec()
                            {
                                Name = "C_1_Create", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "b_id", new ParamSpec() {Name = "b_id", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "s_id", new ParamSpec() {Name = "s_id", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        },
                        {
                            "C_2_Done", new OperationSpec()
                            {
                                Name = "C_2_Done", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "CX", new ClassSpec()
                {                
                    Name = "CX",
                    KeyLetter = "CX",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "S_ID", new PropSpec()
                            { Name = "S_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "C_ID", new PropSpec()
                            { Name = "C_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "S[R6]", new LinkSpec()
                            { Name = "S[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "S" }
                        },
                        {
                            "C[R7.'is target of']", new LinkSpec()
                            { Name = "C[R7.'is target of']", RelID = "R7", Phrase = "is target of", Set = false, Condition = true, DstKeyLett = "C" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "S", new ClassSpec()
                {                
                    Name = "S",
                    KeyLetter = "S",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "S_ID", new PropSpec()
                            { Name = "S_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "R[R5]", new LinkSpec()
                            { Name = "R[R5]", RelID = "R5", Phrase = "", Set = true, Condition = true, DstKeyLett = "R" }
                        },
                        {
                            "CX[R6]", new LinkSpec()
                            { Name = "CX[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "CX" }
                        },
                        {
                            "CY[R6]", new LinkSpec()
                            { Name = "CY[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "CY" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "CY", new ClassSpec()
                {                
                    Name = "CY",
                    KeyLetter = "CY",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "S_ID", new PropSpec()
                            { Name = "S_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Price", new PropSpec()
                            { Name = "Price", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "S[R6]", new LinkSpec()
                            { Name = "S[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "S" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "D", new ClassSpec()
                {                
                    Name = "D",
                    KeyLetter = "D",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "D_ID", new PropSpec()
                            { Name = "D_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "A_ID", new PropSpec()
                            { Name = "A_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "ComplexValue", new PropSpec()
                            { Name = "ComplexValue", DataType = ParamSpec.DataType.Complex, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "RealValue", new PropSpec()
                            { Name = "RealValue", DataType = ParamSpec.DataType.Real, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "R[R5]", new LinkSpec()
                            { Name = "R[R5]", RelID = "R5", Phrase = "", Set = true, Condition = true, DstKeyLett = "R" }
                        },
                        {
                            "A[R4]", new LinkSpec()
                            { Name = "A[R4]", RelID = "R4", Phrase = "", Set = false, Condition = true, DstKeyLett = "A" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "G", new ClassSpec()
                {                
                    Name = "G",
                    KeyLetter = "G",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "G_ID", new PropSpec()
                            { Name = "G_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "I[R8.'left']", new LinkSpec()
                            { Name = "I[R8.'left']", RelID = "R8", Phrase = "left", Set = true, Condition = false, DstKeyLett = "I" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "H", new ClassSpec()
                {                
                    Name = "H",
                    KeyLetter = "H",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "H_ID", new PropSpec()
                            { Name = "H_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "I[R8.'right']", new LinkSpec()
                            { Name = "I[R8.'right']", RelID = "R8", Phrase = "right", Set = true, Condition = false, DstKeyLett = "I" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "I", new ClassSpec()
                {                
                    Name = "I",
                    KeyLetter = "I",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "I_ID", new PropSpec()
                            { Name = "I_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "leftG_ID", new PropSpec()
                            { Name = "leftG_ID", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "rightH_ID", new PropSpec()
                            { Name = "rightH_ID", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "OI[R9.'next']", new LinkSpec()
                            { Name = "OI[R9.'next']", RelID = "R9", Phrase = "next", Set = false, Condition = true, DstKeyLett = "OI" }
                        },
                        {
                            "OI[R9.'prev']", new LinkSpec()
                            { Name = "OI[R9.'prev']", RelID = "R9", Phrase = "prev", Set = false, Condition = true, DstKeyLett = "OI" }
                        },
                        {
                            "G[R8.'left']", new LinkSpec()
                            { Name = "G[R8.'left']", RelID = "R8", Phrase = "left", Set = false, Condition = false, DstKeyLett = "G" }
                        },
                        {
                            "H[R8.'right']", new LinkSpec()
                            { Name = "H[R8.'right']", RelID = "R8", Phrase = "right", Set = false, Condition = false, DstKeyLett = "H" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "OI", new ClassSpec()
                {                
                    Name = "OI",
                    KeyLetter = "OI",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "prevI_ID", new PropSpec()
                            { Name = "prevI_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "nextG_ID", new PropSpec()
                            { Name = "nextG_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "nextH_ID", new PropSpec()
                            { Name = "nextH_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Order", new PropSpec()
                            { Name = "Order", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "I[R9.'next']", new LinkSpec()
                            { Name = "I[R9.'next']", RelID = "R9", Phrase = "next", Set = false, Condition = false, DstKeyLett = "I" }
                        },
                        {
                            "I[R9.'prev']", new LinkSpec()
                            { Name = "I[R9.'prev']", RelID = "R9", Phrase = "prev", Set = false, Condition = false, DstKeyLett = "I" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "R", new ClassSpec()
                {                
                    Name = "R",
                    KeyLetter = "R",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "D_ID", new PropSpec()
                            { Name = "D_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "S_ID", new PropSpec()
                            { Name = "S_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "D[R5]", new LinkSpec()
                            { Name = "D[R5]", RelID = "R5", Phrase = "", Set = false, Condition = false, DstKeyLett = "D" }
                        },
                        {
                            "S[R5]", new LinkSpec()
                            { Name = "S[R5]", RelID = "R5", Phrase = "", Set = false, Condition = false, DstKeyLett = "S" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            }
        };

        public override string InvokeDomainOperation(string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (domainOpsParamSpecs.ContainsKey(name))
            {
                var opSpec = domainOpsParamSpecs[name];
                RequestingParameters invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>() };
                if (CheckParameters(opSpec, parameters, invSpec))
                {
                    switch (name)
                    {
                        case "CreateTest":
                            domainModel.CreateTest(numOfB:(int)invSpec.Parameters["numOfB"], x:(int)invSpec.Parameters["x"], y:(int)invSpec.Parameters["y"]);
                            break;
                        case "DeleteTest":
                            domainModel.DeleteTest();
                            break;
                        case "QueryTest":
                            domainModel.QueryTest();
                            break;
                        case "ReturnTest":
                            var resultOfReturnTest = new { result = domainModel.ReturnTest() };
                            result = Newtonsoft.Json.JsonConvert.SerializeObject(resultOfReturnTest);
                            break;
                        case "InvokeTest":
                            domainModel.InvokeTest();
                            break;
                        case "RelateTest":
                            domainModel.RelateTest();
                            break;
                        case "EventTest":
                            domainModel.EventTest();
                            break;
                    }
                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) domainModel.InstanceRepository.ExternalStorageAdaptor.ClearCache(CIMActionLogicGenerationTestLib.DomainName);

                }
            }

            return result;
        }

        public override string InvokeDomainClassOperation(string classKeyLett, string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "A":
                                    var instanceOfATempSet = domainModel.InstanceRepository.GetDomainInstances("A").Where(selected => (((DomainClassA)selected).Attr_A_ID == invSpec.Identities["A_ID"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfATempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMActionLogicGenerationTestLib.DomainName, "A", instanceOfATempSet, () => { return $"A_ID = '{invSpec.Identities["A_ID"]}'"; }, () => { return DomainClassABase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfA = (DomainClassA)instanceOfATempSet.FirstOrDefault();
                                    if (instanceOfA != null)
                                    {
                                        switch (name)
                                        {
                                            case "SetTest":
                                                var resultOfSetTest = new { result = instanceOfA.SetTest(s:(string)invSpec.Parameters["s"], x:(int)invSpec.Parameters["x"]) };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultOfSetTest);
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                                case "B":
                                    var instanceOfBTempSet = domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_B_ID == invSpec.Identities["B_ID"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfBTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMActionLogicGenerationTestLib.DomainName, "B", instanceOfBTempSet, () => { return $"B_ID = '{invSpec.Identities["B_ID"]}'"; }, () => { return DomainClassBBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfB = (DomainClassB)instanceOfBTempSet.FirstOrDefault();
                                    if (instanceOfB != null)
                                    {
                                        switch (name)
                                        {
                                            case "ChangeKind":
                                                instanceOfB.ChangeKind();
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                            }
                        }
                    }

                }
            }

            return result;
        }

        public override string SendEvent(string classKeyLett, string name, RequestingParameters parameters)
        {
            string status = "";
            bool sent = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Events.ContainsKey(name))
                {
                    var evtSpec = classSpec.Events[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(evtSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "A":
                                    var instanceOfATempSet = domainModel.InstanceRepository.GetDomainInstances("A").Where(selected => (((DomainClassA)selected).Attr_A_ID == invSpec.Identities["A_ID"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfATempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMActionLogicGenerationTestLib.DomainName, "A", instanceOfATempSet, () => { return $"A_ID = '{invSpec.Identities["A_ID"]}'"; }, () => { return DomainClassABase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfA = (DomainClassA)instanceOfATempSet.FirstOrDefault();
                                    switch (name)
                                    {
                                        case "A_1_Update":
                                            var evtOfA_1_Update = DomainClassAStateMachine.A_1_Update.Create(instanceOfA, name:(string)invSpec.Parameters["name"], number:(int)invSpec.Parameters["number"], isSelfEvent:false, sendNow:true);
                                            if (evtOfA_1_Update != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - A_ID = '{invSpec.Identities["A_ID"]}'";
                                            }
                                            break;
                                        default:
                                            status = $"unknown event label:'{name}'";
                                            break;
                                    }
                                    break;
                                case "C":
                                    var instanceOfCTempSet = domainModel.InstanceRepository.GetDomainInstances("C").Where(selected => (((DomainClassC)selected).Attr_C_ID == invSpec.Identities["C_ID"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfCTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMActionLogicGenerationTestLib.DomainName, "C", instanceOfCTempSet, () => { return $"C_ID = '{invSpec.Identities["C_ID"]}'"; }, () => { return DomainClassCBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfC = (DomainClassC)instanceOfCTempSet.FirstOrDefault();
                                    switch (name)
                                    {
                                        case "C_1_Create":
                                            DomainClassCStateMachine.C_1_Create.Create(instanceOfC, b_id:(string)invSpec.Parameters["b_id"], s_id:(string)invSpec.Parameters["s_id"], isSelfEvent:false, sendNow:true, domainModel.InstanceRepository, logger:logger);
                                            sent = true;
                                            break;
                                        case "C_2_Done":
                                            var evtOfC_2_Done = DomainClassCStateMachine.C_2_Done.Create(instanceOfC, isSelfEvent:false, sendNow:true);
                                            if (evtOfC_2_Done != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - C_ID = '{invSpec.Identities["C_ID"]}'";
                                            }
                                            break;
                                        default:
                                            status = $"unknown event label:'{name}'";
                                            break;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            var result = new { sent = sent, status = status };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string UpdateClassProperties(string classKeyLett, RequestingParameters parameters)
        {
            bool updated = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                if (CheckProperties(classSpec.Properties, parameters, invSpec))
                {
                    switch (classKeyLett)
                    {
                        case "A":
                            var instanceOfA = (DomainClassA)domainModel.InstanceRepository.GetDomainInstances("A").Where(selected => (((DomainClassA)selected).Attr_A_ID == invSpec.Identities["A_ID"])).FirstOrDefault();
                            if (instanceOfA != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Name"))
                                {
                                    instanceOfA.Attr_Name = (string)invSpec.Parameters["Name"];
                                }
                                if (invSpec.Parameters.ContainsKey("Number"))
                                {
                                    instanceOfA.Attr_Number = (int)invSpec.Parameters["Number"];
                                }
                                updated = true;
                            }
                            break;
                        case "B":
                            var instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_B_ID == invSpec.Identities["B_ID"])).FirstOrDefault();
                            if (instanceOfB != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Kind"))
                                {
                                    instanceOfB.Attr_Kind = (DomainTypeKindOfB)invSpec.Parameters["Kind"];
                                }
                                updated = true;
                            }
                            break;
                        case "C":
                            var instanceOfC = (DomainClassC)domainModel.InstanceRepository.GetDomainInstances("C").Where(selected => (((DomainClassC)selected).Attr_C_ID == invSpec.Identities["C_ID"])).FirstOrDefault();
                            if (instanceOfC != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Number"))
                                {
                                    instanceOfC.Attr_Number = (int)invSpec.Parameters["Number"];
                                }
                                if (invSpec.Parameters.ContainsKey("CreatedTime"))
                                {
                                    instanceOfC.Attr_CreatedTime = (DateTime)invSpec.Parameters["CreatedTime"];
                                }
                                updated = true;
                            }
                            break;
                        case "CY":
                            var instanceOfCY = (DomainClassCY)domainModel.InstanceRepository.GetDomainInstances("CY").Where(selected => (((DomainClassCY)selected).Attr_S_ID == invSpec.Identities["S_ID"])).FirstOrDefault();
                            if (instanceOfCY != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Price"))
                                {
                                    instanceOfCY.Attr_Price = (int)invSpec.Parameters["Price"];
                                }
                                updated = true;
                            }
                            break;
                        case "D":
                            var instanceOfD = (DomainClassD)domainModel.InstanceRepository.GetDomainInstances("D").Where(selected => (((DomainClassD)selected).Attr_D_ID == invSpec.Identities["D_ID"])).FirstOrDefault();
                            if (instanceOfD != null)
                            {
                                if (invSpec.Parameters.ContainsKey("ComplexValue"))
                                {
                                    instanceOfD.Attr_ComplexValue.Restore((IDictionary<string, object>)invSpec.Parameters["ComplexValue"]);
                                }
                                if (invSpec.Parameters.ContainsKey("RealValue"))
                                {
                                    instanceOfD.Attr_RealValue = (double)invSpec.Parameters["RealValue"];
                                }
                                updated = true;
                            }
                            break;
                        case "OI":
                            var instanceOfOI = (DomainClassOI)domainModel.InstanceRepository.GetDomainInstances("OI").Where(selected => (((DomainClassOI)selected).Attr_prevI_ID == invSpec.Identities["prevI_ID"] && ((DomainClassOI)selected).Attr_nextG_ID == invSpec.Identities["nextG_ID"] && ((DomainClassOI)selected).Attr_nextH_ID == invSpec.Identities["nextH_ID"])).FirstOrDefault();
                            if (instanceOfOI != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Order"))
                                {
                                    instanceOfOI.Attr_Order = (int)invSpec.Parameters["Order"];
                                }
                                updated = true;
                            }
                            break;
                    }              
                }
            }
            if (updated)
            {
                domainModel.InstanceRepository.SyncChangedStates(new List<ChangedState>());
            }
            var result = new { updated = updated };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string GetInstances(string classKeyLett)
        {
            List<Dictionary<string, object>> resultInstances = GetInstancesRaw(classKeyLett);

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        protected List<Dictionary<string, object>> GetInstancesRaw(string classKeyLett)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var instances = domainModel.InstanceRepository.GetDomainInstances(classKeyLett);
                foreach (var instance in instances)
                {
                    switch (classKeyLett)
                    {
                        case "A":
                            var instanceOfA = (DomainClassA)instance;
                            var resultOfinstanceOfA = new Dictionary<string, object>();
                            resultOfinstanceOfA.Add("A_ID", instanceOfA.Attr_A_ID);
                            resultOfinstanceOfA.Add("Name", instanceOfA.Attr_Name);
                            resultOfinstanceOfA.Add("Number", instanceOfA.Attr_Number);
                            resultOfinstanceOfA.Add("current_state", instanceOfA.Attr_current_state);
                            resultOfinstanceOfA.Add("MathProperty", instanceOfA.Attr_MathProperty);
                            resultInstances.Add(resultOfinstanceOfA);
                            break;
                        case "B":
                            var instanceOfB = (DomainClassB)instance;
                            var resultOfinstanceOfB = new Dictionary<string, object>();
                            resultOfinstanceOfB.Add("B_ID", instanceOfB.Attr_B_ID);
                            resultOfinstanceOfB.Add("A_ID", instanceOfB.Attr_A_ID);
                            resultOfinstanceOfB.Add("NumberOfC", instanceOfB.Attr_NumberOfC);
                            resultOfinstanceOfB.Add("Kind", instanceOfB.Attr_Kind);
                            resultInstances.Add(resultOfinstanceOfB);
                            break;
                        case "C":
                            var instanceOfC = (DomainClassC)instance;
                            var resultOfinstanceOfC = new Dictionary<string, object>();
                            resultOfinstanceOfC.Add("C_ID", instanceOfC.Attr_C_ID);
                            resultOfinstanceOfC.Add("Number", instanceOfC.Attr_Number);
                            resultOfinstanceOfC.Add("B_ID", instanceOfC.Attr_B_ID);
                            resultOfinstanceOfC.Add("Successor_C_ID", instanceOfC.Attr_Successor_C_ID);
                            resultOfinstanceOfC.Add("CreatedTime", instanceOfC.Attr_CreatedTime);
                            resultOfinstanceOfC.Add("current_state", instanceOfC.Attr_current_state);
                            resultInstances.Add(resultOfinstanceOfC);
                            break;
                        case "CX":
                            var instanceOfCX = (DomainClassCX)instance;
                            var resultOfinstanceOfCX = new Dictionary<string, object>();
                            resultOfinstanceOfCX.Add("S_ID", instanceOfCX.Attr_S_ID);
                            resultOfinstanceOfCX.Add("C_ID", instanceOfCX.Attr_C_ID);
                            resultInstances.Add(resultOfinstanceOfCX);
                            break;
                        case "S":
                            var instanceOfS = (DomainClassS)instance;
                            var resultOfinstanceOfS = new Dictionary<string, object>();
                            resultOfinstanceOfS.Add("S_ID", instanceOfS.Attr_S_ID);
                            resultInstances.Add(resultOfinstanceOfS);
                            break;
                        case "CY":
                            var instanceOfCY = (DomainClassCY)instance;
                            var resultOfinstanceOfCY = new Dictionary<string, object>();
                            resultOfinstanceOfCY.Add("S_ID", instanceOfCY.Attr_S_ID);
                            resultOfinstanceOfCY.Add("Price", instanceOfCY.Attr_Price);
                            resultInstances.Add(resultOfinstanceOfCY);
                            break;
                        case "D":
                            var instanceOfD = (DomainClassD)instance;
                            var resultOfinstanceOfD = new Dictionary<string, object>();
                            resultOfinstanceOfD.Add("D_ID", instanceOfD.Attr_D_ID);
                            resultOfinstanceOfD.Add("A_ID", instanceOfD.Attr_A_ID);
                            resultOfinstanceOfD.Add("ComplexValue", instanceOfD.Attr_ComplexValue);
                            resultOfinstanceOfD.Add("RealValue", instanceOfD.Attr_RealValue);
                            resultInstances.Add(resultOfinstanceOfD);
                            break;
                        case "G":
                            var instanceOfG = (DomainClassG)instance;
                            var resultOfinstanceOfG = new Dictionary<string, object>();
                            resultOfinstanceOfG.Add("G_ID", instanceOfG.Attr_G_ID);
                            resultInstances.Add(resultOfinstanceOfG);
                            break;
                        case "H":
                            var instanceOfH = (DomainClassH)instance;
                            var resultOfinstanceOfH = new Dictionary<string, object>();
                            resultOfinstanceOfH.Add("H_ID", instanceOfH.Attr_H_ID);
                            resultInstances.Add(resultOfinstanceOfH);
                            break;
                        case "I":
                            var instanceOfI = (DomainClassI)instance;
                            var resultOfinstanceOfI = new Dictionary<string, object>();
                            resultOfinstanceOfI.Add("I_ID", instanceOfI.Attr_I_ID);
                            resultOfinstanceOfI.Add("leftG_ID", instanceOfI.Attr_leftG_ID);
                            resultOfinstanceOfI.Add("rightH_ID", instanceOfI.Attr_rightH_ID);
                            resultInstances.Add(resultOfinstanceOfI);
                            break;
                        case "OI":
                            var instanceOfOI = (DomainClassOI)instance;
                            var resultOfinstanceOfOI = new Dictionary<string, object>();
                            resultOfinstanceOfOI.Add("prevI_ID", instanceOfOI.Attr_prevI_ID);
                            resultOfinstanceOfOI.Add("nextG_ID", instanceOfOI.Attr_nextG_ID);
                            resultOfinstanceOfOI.Add("nextH_ID", instanceOfOI.Attr_nextH_ID);
                            resultOfinstanceOfOI.Add("Order", instanceOfOI.Attr_Order);
                            resultInstances.Add(resultOfinstanceOfOI);
                            break;
                        case "R":
                            var instanceOfR = (DomainClassR)instance;
                            var resultOfinstanceOfR = new Dictionary<string, object>();
                            resultOfinstanceOfR.Add("D_ID", instanceOfR.Attr_D_ID);
                            resultOfinstanceOfR.Add("S_ID", instanceOfR.Attr_S_ID);
                            resultInstances.Add(resultOfinstanceOfR);
                            break;
                    }
                }
                
            }

            return resultInstances;
        }

        public override string GetInstance(string classKeyLett, IDictionary<string, string> identities)
        {
            Dictionary<string, object> resultInstance = new Dictionary<string, object>();
            switch (classKeyLett)
            {
                case "A":
                    DomainClassA instanceOfA = (DomainClassA)domainModel.InstanceRepository.GetDomainInstances("A").Where(selected => (((DomainClassA)selected).Attr_A_ID == identities["A_ID"])).FirstOrDefault();
                    if (instanceOfA != null)
                    {
                        resultInstance.Add("A_ID", instanceOfA.Attr_A_ID);
                        resultInstance.Add("Name", instanceOfA.Attr_Name);
                        resultInstance.Add("Number", instanceOfA.Attr_Number);
                        resultInstance.Add("current_state", instanceOfA.Attr_current_state);
                        resultInstance.Add("MathProperty", instanceOfA.Attr_MathProperty);
                    }
                    break;
                case "B":
                    DomainClassB instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_B_ID == identities["B_ID"])).FirstOrDefault();
                    if (instanceOfB != null)
                    {
                        resultInstance.Add("B_ID", instanceOfB.Attr_B_ID);
                        resultInstance.Add("A_ID", instanceOfB.Attr_A_ID);
                        resultInstance.Add("NumberOfC", instanceOfB.Attr_NumberOfC);
                        resultInstance.Add("Kind", instanceOfB.Attr_Kind);
                    }
                    break;
                case "C":
                    DomainClassC instanceOfC = (DomainClassC)domainModel.InstanceRepository.GetDomainInstances("C").Where(selected => (((DomainClassC)selected).Attr_C_ID == identities["C_ID"])).FirstOrDefault();
                    if (instanceOfC != null)
                    {
                        resultInstance.Add("C_ID", instanceOfC.Attr_C_ID);
                        resultInstance.Add("Number", instanceOfC.Attr_Number);
                        resultInstance.Add("B_ID", instanceOfC.Attr_B_ID);
                        resultInstance.Add("Successor_C_ID", instanceOfC.Attr_Successor_C_ID);
                        resultInstance.Add("CreatedTime", instanceOfC.Attr_CreatedTime);
                        resultInstance.Add("current_state", instanceOfC.Attr_current_state);
                    }
                    break;
                case "CX":
                    DomainClassCX instanceOfCX = (DomainClassCX)domainModel.InstanceRepository.GetDomainInstances("CX").Where(selected => (((DomainClassCX)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                    if (instanceOfCX != null)
                    {
                        resultInstance.Add("S_ID", instanceOfCX.Attr_S_ID);
                        resultInstance.Add("C_ID", instanceOfCX.Attr_C_ID);
                    }
                    break;
                case "S":
                    DomainClassS instanceOfS = (DomainClassS)domainModel.InstanceRepository.GetDomainInstances("S").Where(selected => (((DomainClassS)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                    if (instanceOfS != null)
                    {
                        resultInstance.Add("S_ID", instanceOfS.Attr_S_ID);
                    }
                    break;
                case "CY":
                    DomainClassCY instanceOfCY = (DomainClassCY)domainModel.InstanceRepository.GetDomainInstances("CY").Where(selected => (((DomainClassCY)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                    if (instanceOfCY != null)
                    {
                        resultInstance.Add("S_ID", instanceOfCY.Attr_S_ID);
                        resultInstance.Add("Price", instanceOfCY.Attr_Price);
                    }
                    break;
                case "D":
                    DomainClassD instanceOfD = (DomainClassD)domainModel.InstanceRepository.GetDomainInstances("D").Where(selected => (((DomainClassD)selected).Attr_D_ID == identities["D_ID"])).FirstOrDefault();
                    if (instanceOfD != null)
                    {
                        resultInstance.Add("D_ID", instanceOfD.Attr_D_ID);
                        resultInstance.Add("A_ID", instanceOfD.Attr_A_ID);
                        resultInstance.Add("ComplexValue", instanceOfD.Attr_ComplexValue);
                        resultInstance.Add("RealValue", instanceOfD.Attr_RealValue);
                    }
                    break;
                case "G":
                    DomainClassG instanceOfG = (DomainClassG)domainModel.InstanceRepository.GetDomainInstances("G").Where(selected => (((DomainClassG)selected).Attr_G_ID == identities["G_ID"])).FirstOrDefault();
                    if (instanceOfG != null)
                    {
                        resultInstance.Add("G_ID", instanceOfG.Attr_G_ID);
                    }
                    break;
                case "H":
                    DomainClassH instanceOfH = (DomainClassH)domainModel.InstanceRepository.GetDomainInstances("H").Where(selected => (((DomainClassH)selected).Attr_H_ID == identities["H_ID"])).FirstOrDefault();
                    if (instanceOfH != null)
                    {
                        resultInstance.Add("H_ID", instanceOfH.Attr_H_ID);
                    }
                    break;
                case "I":
                    DomainClassI instanceOfI = (DomainClassI)domainModel.InstanceRepository.GetDomainInstances("I").Where(selected => (((DomainClassI)selected).Attr_I_ID == identities["I_ID"])).FirstOrDefault();
                    if (instanceOfI != null)
                    {
                        resultInstance.Add("I_ID", instanceOfI.Attr_I_ID);
                        resultInstance.Add("leftG_ID", instanceOfI.Attr_leftG_ID);
                        resultInstance.Add("rightH_ID", instanceOfI.Attr_rightH_ID);
                    }
                    break;
                case "OI":
                    DomainClassOI instanceOfOI = (DomainClassOI)domainModel.InstanceRepository.GetDomainInstances("OI").Where(selected => (((DomainClassOI)selected).Attr_prevI_ID == identities["prevI_ID"] && ((DomainClassOI)selected).Attr_nextG_ID == identities["nextG_ID"] && ((DomainClassOI)selected).Attr_nextH_ID == identities["nextH_ID"])).FirstOrDefault();
                    if (instanceOfOI != null)
                    {
                        resultInstance.Add("prevI_ID", instanceOfOI.Attr_prevI_ID);
                        resultInstance.Add("nextG_ID", instanceOfOI.Attr_nextG_ID);
                        resultInstance.Add("nextH_ID", instanceOfOI.Attr_nextH_ID);
                        resultInstance.Add("Order", instanceOfOI.Attr_Order);
                    }
                    break;
                case "R":
                    DomainClassR instanceOfR = (DomainClassR)domainModel.InstanceRepository.GetDomainInstances("R").Where(selected => (((DomainClassR)selected).Attr_D_ID == identities["D_ID"] && ((DomainClassR)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                    if (instanceOfR != null)
                    {
                        resultInstance.Add("D_ID", instanceOfR.Attr_D_ID);
                        resultInstance.Add("S_ID", instanceOfR.Attr_S_ID);
                    }
                    break;
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstance);
        }

        public override string GetLinkedInstances(string classKeyLett, IDictionary<string, string> identities, string relName)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Links.ContainsKey(relName))
                {
                    switch (classKeyLett)
                    {
                        case "A":
                            DomainClassA instanceOfA = (DomainClassA)domainModel.InstanceRepository.GetDomainInstances("A").Where(selected => (((DomainClassA)selected).Attr_A_ID == identities["A_ID"])).FirstOrDefault();
                            if (instanceOfA != null)
                            {
                                switch (relName)
                                {
                                    case "B[R1]":
                                        var linkedInstancesOfR1B = instanceOfA.LinkedR1();
                                        foreach (var linkedInstanceOfR1B in linkedInstancesOfR1B)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "B_ID", linkedInstanceOfR1B.Attr_B_ID },
                                                { "A_ID", linkedInstanceOfR1B.Attr_A_ID },
                                                { "NumberOfC", linkedInstanceOfR1B.Attr_NumberOfC },
                                                { "Kind", linkedInstanceOfR1B.Attr_Kind }
                                            });
                                        }
                                        break;
                                    case "D[R4]":
                                        var linkedInstancesOfR4D = instanceOfA.LinkedR4();
                                        foreach (var linkedInstanceOfR4D in linkedInstancesOfR4D)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "D_ID", linkedInstanceOfR4D.Attr_D_ID },
                                                { "A_ID", linkedInstanceOfR4D.Attr_A_ID },
                                                { "ComplexValue", linkedInstanceOfR4D.Attr_ComplexValue },
                                                { "RealValue", linkedInstanceOfR4D.Attr_RealValue }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "B":
                            DomainClassB instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_B_ID == identities["B_ID"])).FirstOrDefault();
                            if (instanceOfB != null)
                            {
                                switch (relName)
                                {
                                    case "C[R2]":
                                        var linkedInstancesOfR2C = instanceOfB.LinkedR2();
                                        foreach (var linkedInstanceOfR2C in linkedInstancesOfR2C)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "C_ID", linkedInstanceOfR2C.Attr_C_ID },
                                                { "Number", linkedInstanceOfR2C.Attr_Number },
                                                { "B_ID", linkedInstanceOfR2C.Attr_B_ID },
                                                { "Successor_C_ID", linkedInstanceOfR2C.Attr_Successor_C_ID },
                                                { "CreatedTime", linkedInstanceOfR2C.Attr_CreatedTime },
                                                { "current_state", linkedInstanceOfR2C.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "A[R1]":
                                        var linkedInstanceOfR1A = instanceOfB.LinkedR1();
                                        if (linkedInstanceOfR1A != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "A_ID", linkedInstanceOfR1A.Attr_A_ID },
                                                { "Name", linkedInstanceOfR1A.Attr_Name },
                                                { "Number", linkedInstanceOfR1A.Attr_Number },
                                                { "current_state", linkedInstanceOfR1A.Attr_current_state },
                                                { "MathProperty", linkedInstanceOfR1A.Attr_MathProperty }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "C":
                            DomainClassC instanceOfC = (DomainClassC)domainModel.InstanceRepository.GetDomainInstances("C").Where(selected => (((DomainClassC)selected).Attr_C_ID == identities["C_ID"])).FirstOrDefault();
                            if (instanceOfC != null)
                            {
                                switch (relName)
                                {
                                    case "C[R3.'predecessor']":
                                        var linkedInstanceOfR3PredecessorC = instanceOfC.LinkedR3Predecessor();
                                        if (linkedInstanceOfR3PredecessorC != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "C_ID", linkedInstanceOfR3PredecessorC.Attr_C_ID },
                                                { "Number", linkedInstanceOfR3PredecessorC.Attr_Number },
                                                { "B_ID", linkedInstanceOfR3PredecessorC.Attr_B_ID },
                                                { "Successor_C_ID", linkedInstanceOfR3PredecessorC.Attr_Successor_C_ID },
                                                { "CreatedTime", linkedInstanceOfR3PredecessorC.Attr_CreatedTime },
                                                { "current_state", linkedInstanceOfR3PredecessorC.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "CX[R7]":
                                        var linkedInstanceOfR7CX = instanceOfC.LinkedR7();
                                        if (linkedInstanceOfR7CX != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR7CX.Attr_S_ID },
                                                { "C_ID", linkedInstanceOfR7CX.Attr_C_ID }
                                            });
                                        }
                                        break;
                                    case "B[R2]":
                                        var linkedInstanceOfR2B = instanceOfC.LinkedR2();
                                        if (linkedInstanceOfR2B != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "B_ID", linkedInstanceOfR2B.Attr_B_ID },
                                                { "A_ID", linkedInstanceOfR2B.Attr_A_ID },
                                                { "NumberOfC", linkedInstanceOfR2B.Attr_NumberOfC },
                                                { "Kind", linkedInstanceOfR2B.Attr_Kind }
                                            });
                                        }
                                        break;
                                    case "C[R3.'successor']":
                                        var linkedInstanceOfR3SuccessorC = instanceOfC.LinkedR3Successor();
                                        if (linkedInstanceOfR3SuccessorC != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "C_ID", linkedInstanceOfR3SuccessorC.Attr_C_ID },
                                                { "Number", linkedInstanceOfR3SuccessorC.Attr_Number },
                                                { "B_ID", linkedInstanceOfR3SuccessorC.Attr_B_ID },
                                                { "Successor_C_ID", linkedInstanceOfR3SuccessorC.Attr_Successor_C_ID },
                                                { "CreatedTime", linkedInstanceOfR3SuccessorC.Attr_CreatedTime },
                                                { "current_state", linkedInstanceOfR3SuccessorC.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "CX":
                            DomainClassCX instanceOfCX = (DomainClassCX)domainModel.InstanceRepository.GetDomainInstances("CX").Where(selected => (((DomainClassCX)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                            if (instanceOfCX != null)
                            {
                                switch (relName)
                                {
                                    case "S[R6]":
                                        var linkedInstanceOfR6S = instanceOfCX.GetSuperClassR6();
                                        if (linkedInstanceOfR6S != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR6S.Attr_S_ID }
                                            });
                                        }
                                        break;
                                    case "C[R7.'is target of']":
                                        var linkedInstanceOfR7IsTargetOfC = instanceOfCX.LinkedR7IsTargetOf();
                                        if (linkedInstanceOfR7IsTargetOfC != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "C_ID", linkedInstanceOfR7IsTargetOfC.Attr_C_ID },
                                                { "Number", linkedInstanceOfR7IsTargetOfC.Attr_Number },
                                                { "B_ID", linkedInstanceOfR7IsTargetOfC.Attr_B_ID },
                                                { "Successor_C_ID", linkedInstanceOfR7IsTargetOfC.Attr_Successor_C_ID },
                                                { "CreatedTime", linkedInstanceOfR7IsTargetOfC.Attr_CreatedTime },
                                                { "current_state", linkedInstanceOfR7IsTargetOfC.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "S":
                            DomainClassS instanceOfS = (DomainClassS)domainModel.InstanceRepository.GetDomainInstances("S").Where(selected => (((DomainClassS)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                            if (instanceOfS != null)
                            {
                                switch (relName)
                                {
                                    case "R[R5]":
                                        var linkedInstancesOfR5OtherR = instanceOfS.LinkedR5One();
                                        foreach (var linkedInstanceOfR5OtherR in linkedInstancesOfR5OtherR)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "D_ID", linkedInstanceOfR5OtherR.Attr_D_ID },
                                                { "S_ID", linkedInstanceOfR5OtherR.Attr_S_ID }
                                            });
                                        }
                                        break;
                                    case "CX[R6]":
                                        var linkedInstanceOfR6CX = instanceOfS.LinkedR6CX();
                                        if (linkedInstanceOfR6CX != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR6CX.Attr_S_ID },
                                                { "C_ID", linkedInstanceOfR6CX.Attr_C_ID }
                                            });
                                        }
                                        break;
                                    case "CY[R6]":
                                        var linkedInstanceOfR6CY = instanceOfS.LinkedR6CY();
                                        if (linkedInstanceOfR6CY != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR6CY.Attr_S_ID },
                                                { "Price", linkedInstanceOfR6CY.Attr_Price }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "CY":
                            DomainClassCY instanceOfCY = (DomainClassCY)domainModel.InstanceRepository.GetDomainInstances("CY").Where(selected => (((DomainClassCY)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                            if (instanceOfCY != null)
                            {
                                switch (relName)
                                {
                                    case "S[R6]":
                                        var linkedInstanceOfR6S = instanceOfCY.GetSuperClassR6();
                                        if (linkedInstanceOfR6S != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR6S.Attr_S_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "D":
                            DomainClassD instanceOfD = (DomainClassD)domainModel.InstanceRepository.GetDomainInstances("D").Where(selected => (((DomainClassD)selected).Attr_D_ID == identities["D_ID"])).FirstOrDefault();
                            if (instanceOfD != null)
                            {
                                switch (relName)
                                {
                                    case "R[R5]":
                                        var linkedInstancesOfR5OneR = instanceOfD.LinkedR5Other();
                                        foreach (var linkedInstanceOfR5OneR in linkedInstancesOfR5OneR)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "D_ID", linkedInstanceOfR5OneR.Attr_D_ID },
                                                { "S_ID", linkedInstanceOfR5OneR.Attr_S_ID }
                                            });
                                        }
                                        break;
                                    case "A[R4]":
                                        var linkedInstanceOfR4A = instanceOfD.LinkedR4();
                                        if (linkedInstanceOfR4A != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "A_ID", linkedInstanceOfR4A.Attr_A_ID },
                                                { "Name", linkedInstanceOfR4A.Attr_Name },
                                                { "Number", linkedInstanceOfR4A.Attr_Number },
                                                { "current_state", linkedInstanceOfR4A.Attr_current_state },
                                                { "MathProperty", linkedInstanceOfR4A.Attr_MathProperty }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "G":
                            DomainClassG instanceOfG = (DomainClassG)domainModel.InstanceRepository.GetDomainInstances("G").Where(selected => (((DomainClassG)selected).Attr_G_ID == identities["G_ID"])).FirstOrDefault();
                            if (instanceOfG != null)
                            {
                                switch (relName)
                                {
                                    case "I[R8.'left']":
                                        var linkedInstancesOfR8OneLeftI = instanceOfG.LinkedR8OtherRight();
                                        foreach (var linkedInstanceOfR8OneLeftI in linkedInstancesOfR8OneLeftI)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "I_ID", linkedInstanceOfR8OneLeftI.Attr_I_ID },
                                                { "leftG_ID", linkedInstanceOfR8OneLeftI.Attr_leftG_ID },
                                                { "rightH_ID", linkedInstanceOfR8OneLeftI.Attr_rightH_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "H":
                            DomainClassH instanceOfH = (DomainClassH)domainModel.InstanceRepository.GetDomainInstances("H").Where(selected => (((DomainClassH)selected).Attr_H_ID == identities["H_ID"])).FirstOrDefault();
                            if (instanceOfH != null)
                            {
                                switch (relName)
                                {
                                    case "I[R8.'right']":
                                        var linkedInstancesOfR8OtherRightI = instanceOfH.LinkedR8OneLeft();
                                        foreach (var linkedInstanceOfR8OtherRightI in linkedInstancesOfR8OtherRightI)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "I_ID", linkedInstanceOfR8OtherRightI.Attr_I_ID },
                                                { "leftG_ID", linkedInstanceOfR8OtherRightI.Attr_leftG_ID },
                                                { "rightH_ID", linkedInstanceOfR8OtherRightI.Attr_rightH_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "I":
                            DomainClassI instanceOfI = (DomainClassI)domainModel.InstanceRepository.GetDomainInstances("I").Where(selected => (((DomainClassI)selected).Attr_I_ID == identities["I_ID"])).FirstOrDefault();
                            if (instanceOfI != null)
                            {
                                switch (relName)
                                {
                                    case "OI[R9.'next']":
                                        var linkedInstanceOfR9OneNextOI = instanceOfI.LinkedR9OtherPrev();
                                        if (linkedInstanceOfR9OneNextOI != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "prevI_ID", linkedInstanceOfR9OneNextOI.Attr_prevI_ID },
                                                { "nextG_ID", linkedInstanceOfR9OneNextOI.Attr_nextG_ID },
                                                { "nextH_ID", linkedInstanceOfR9OneNextOI.Attr_nextH_ID },
                                                { "Order", linkedInstanceOfR9OneNextOI.Attr_Order }
                                            });
                                        }
                                        break;
                                    case "OI[R9.'prev']":
                                        var linkedInstanceOfR9OtherPrevOI = instanceOfI.LinkedR9OneNext();
                                        if (linkedInstanceOfR9OtherPrevOI != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "prevI_ID", linkedInstanceOfR9OtherPrevOI.Attr_prevI_ID },
                                                { "nextG_ID", linkedInstanceOfR9OtherPrevOI.Attr_nextG_ID },
                                                { "nextH_ID", linkedInstanceOfR9OtherPrevOI.Attr_nextH_ID },
                                                { "Order", linkedInstanceOfR9OtherPrevOI.Attr_Order }
                                            });
                                        }
                                        break;
                                    case "G[R8.'left']":
                                        var linkedInstanceOfR8OneLeftG = instanceOfI.LinkedR8OneLeft();
                                        if (linkedInstanceOfR8OneLeftG != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "G_ID", linkedInstanceOfR8OneLeftG.Attr_G_ID }
                                            });
                                        }
                                        break;
                                    case "H[R8.'right']":
                                        var linkedInstanceOfR8OtherRightH = instanceOfI.LinkedR8OtherRight();
                                        if (linkedInstanceOfR8OtherRightH != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "H_ID", linkedInstanceOfR8OtherRightH.Attr_H_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "OI":
                            DomainClassOI instanceOfOI = (DomainClassOI)domainModel.InstanceRepository.GetDomainInstances("OI").Where(selected => (((DomainClassOI)selected).Attr_prevI_ID == identities["prevI_ID"] && ((DomainClassOI)selected).Attr_nextG_ID == identities["nextG_ID"] && ((DomainClassOI)selected).Attr_nextH_ID == identities["nextH_ID"])).FirstOrDefault();
                            if (instanceOfOI != null)
                            {
                                switch (relName)
                                {
                                    case "I[R9.'next']":
                                        var linkedInstanceOfR9OneNextI = instanceOfOI.LinkedR9OneNext();
                                        if (linkedInstanceOfR9OneNextI != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "I_ID", linkedInstanceOfR9OneNextI.Attr_I_ID },
                                                { "leftG_ID", linkedInstanceOfR9OneNextI.Attr_leftG_ID },
                                                { "rightH_ID", linkedInstanceOfR9OneNextI.Attr_rightH_ID }
                                            });
                                        }
                                        break;
                                    case "I[R9.'prev']":
                                        var linkedInstanceOfR9OtherPrevI = instanceOfOI.LinkedR9OtherPrev();
                                        if (linkedInstanceOfR9OtherPrevI != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "I_ID", linkedInstanceOfR9OtherPrevI.Attr_I_ID },
                                                { "leftG_ID", linkedInstanceOfR9OtherPrevI.Attr_leftG_ID },
                                                { "rightH_ID", linkedInstanceOfR9OtherPrevI.Attr_rightH_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "R":
                            DomainClassR instanceOfR = (DomainClassR)domainModel.InstanceRepository.GetDomainInstances("R").Where(selected => (((DomainClassR)selected).Attr_D_ID == identities["D_ID"] && ((DomainClassR)selected).Attr_S_ID == identities["S_ID"])).FirstOrDefault();
                            if (instanceOfR != null)
                            {
                                switch (relName)
                                {
                                    case "D[R5]":
                                        var linkedInstanceOfR5OneD = instanceOfR.LinkedR5One();
                                        if (linkedInstanceOfR5OneD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "D_ID", linkedInstanceOfR5OneD.Attr_D_ID },
                                                { "A_ID", linkedInstanceOfR5OneD.Attr_A_ID },
                                                { "ComplexValue", linkedInstanceOfR5OneD.Attr_ComplexValue },
                                                { "RealValue", linkedInstanceOfR5OneD.Attr_RealValue }
                                            });
                                        }
                                        break;
                                    case "S[R5]":
                                        var linkedInstanceOfR5OtherS = instanceOfR.LinkedR5Other();
                                        if (linkedInstanceOfR5OtherS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "S_ID", linkedInstanceOfR5OtherS.Attr_S_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetDomainOperationsSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(domainOpsParamSpecs);
            return result;
        }

        public override string GetClassesSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(classSpecs);
            return result; 
        }

        public override string GetDomainModelSpec()
        {
            var spec = new {
                name = "ActionLogicGenerationTest",
                operations = domainOpsParamSpecs,
                classes = classSpecs
            };
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(spec);
            return result;
        }

        public override void RegisterUpdateHandler(ClassPropertiesUpdateHandler classPropertiesUpdateHandler, RelationshipUpdateHandler relationshipUpdateHandler)
        {
            domainModel.InstanceRepository.ClassPropertiesUpdated += classPropertiesUpdateHandler;
            domainModel.InstanceRepository.RelationshipUpdated += relationshipUpdateHandler;
        }

        public override void LoadDomainInstances(string instances)
        {
            string domainName = "ActionLogicGenerationTest";
            var instancesJson = Newtonsoft.Json.JsonConvert.DeserializeObject<IDictionary<string, IList<IDictionary<string, object>>>>(instances);
            domainModel.InstanceRepository.LoadState(domainName, instancesJson);
        }

        public override string SaveDomainInstances()
        {
            Dictionary<string, List<Dictionary<string, object>>> instances = new Dictionary<string, List<Dictionary<string, object>>>();
            foreach(var ck in classSpecs.Keys)
            {
                var classInstances = GetInstancesRaw(ck);
                if (classInstances.Count > 0)
                {
                    instances.Add(ck, classInstances);
                }
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(instances);
        }
    }
}
